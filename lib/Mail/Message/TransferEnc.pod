
=head1 NAME

Mail::Message::TransferEnc - message transfer encoder/decoder


=head1 INHERITANCE

 Mail::Message::TransferEnc
   is a Mail::Reporter

 Mail::Message::TransferEnc is extended by
   Mail::Message::TransferEnc::Base64
   Mail::Message::TransferEnc::Binary
   Mail::Message::TransferEnc::EightBit
   Mail::Message::TransferEnc::QuotedPrint
   Mail::Message::TransferEnc::SevenBit


=head1 SYNOPSIS

 my Mail::Message $msg = ...;
 my $decoded = $msg->decoded;
 my $encoded = $msg->encode(transfer => 'base64');


=head1 DESCRIPTION

This class is the base for various encoders and decoders, which are
used during transport of the message.  This packages, and all which are
derived, are invoked by the message's L<Mail::Message::decoded()|Mail::Message/"The body"> and
L<Mail::Message::encode()|Mail::Message/"The body"> methods:

 my $message = $folder->message(3);
 my $decoded_body = $message->decoded;
 my $encoded_body = $message->encode(transfer => 'base64');

The following coders/decoders are currently available:

=over 4

=item * L<Mail::Message::TransferEnc::Base64|Mail::Message::TransferEnc::Base64>

C<base64> for binary information.

=item * L<Mail::Message::TransferEnc::SevenBit|Mail::Message::TransferEnc::SevenBit>

C<7bit> for plain old ASCII characters only.

=item * L<Mail::Message::TransferEnc::EightBit|Mail::Message::TransferEnc::EightBit>

C<8bit> for extended character set data, not encoded.

=item * L<Mail::Message::TransferEnc::QuotedPrint|Mail::Message::TransferEnc::QuotedPrint>

C<quoted-printable> encdoded extended character set data.

=back



=head1 METHODS


=head2 Constructors


Mail::Message::TransferEnc-E<gt>B<new>(OPTIONS)

=over 4

See L<Mail::Reporter/"Constructors">

=back

=head2 The Encoder


Mail::Message::TransferEnc-E<gt>B<addTransferEncoder>(TYPE, CLASS)

=over 4

Adds one new encoder to the list known by the Mail::Box suite.  The
TYPE is found in the message's header in the C<Content-Transfer-Encoding>
field.

=back

$obj-E<gt>B<create>(TYPE, OPTIONS)

=over 4

Create a new coder/decoder based on the required type.

=back

$obj-E<gt>B<name>

=over 4

The name of the encoder.  Case is not significant.

=back

=head2 Encoding


$obj-E<gt>B<check>(BODY, OPTIONS)

=over 4

Check whether the body is correctly encoded.  If so, the body reference is
returned with the C<checked> flag set.  Otherwise, a new object is created
and returned.

 Option       Defined in  Default              
 result_type              <type of source body>

. result_type CLASS

=over 4

The type of the body to be produced, when the checker decides to return
modified data.  

=back

=back

$obj-E<gt>B<decode>(BODY [, OPTIONS])

=over 4

Use the encoder to decode the content of BODY.  A new body is returned.

 Option       Defined in  Default              
 result_type              <type of source body>

. result_type CLASS

=over 4

The type of the body to be produced, when the decoder decides to return
modified data.

=back

=back

$obj-E<gt>B<encode>(BODY, OPTIONS)

=over 4

Use the encoder to encode the content of BODY.

 Option       Defined in  Default              
 result_type              <type of source body>

. result_type CLASS

=over 4

The type of the body to be produced, when the decoder decides to return
modified data.

=back

=back

=head2 Error handling


$obj-E<gt>B<AUTOLOAD>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<addReport>(OBJECT)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

Mail::Message::TransferEnc-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Message::TransferEnc-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Message::TransferEnc-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup


$obj-E<gt>B<DESTROY>

=over 4

See L<Mail::Reporter/"Cleanup">

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back



=head1 DIAGNOSTICS

I<Error:> Decoder for transfer encoding $type does not work: $@

Compiling the required transfer encoding resulted in errors, which means
that the decoder can not be used.

I<Warning:> No decoder for transfer encoding $type.

A decoder for the specified type of transfer encoding is not implemented.

I<Error:> Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.






=head1 REFERENCES

See the MailBox website at L<http://perl.overmeer.net/mailbox/> for more details.

=head1 COPYRIGHTS

Distribution version 2.061.
Written by Mark Overmeer (mark@overmeer.net).  See the ChangeLog for
other contributors.

Copyright (c) 2001-2003 by the author(s). All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


