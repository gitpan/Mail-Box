=head1 NAME

Mail::Message::Body::Multipart - body of a message with attachments

=head1 INHERITANCE

 Mail::Message::Body::Multipart
   is a Mail::Message::Body
   is a Mail::Reporter

=head1 SYNOPSIS

 See Mail::Message::Body

 if($body->isMultipart) {
    my @attachments = $body->parts;
    my $attachment3 = $body->part(2);
    my $before      = $body->preamble;
    my $after       = $body->epilogue;
    $body->part(1)->delete;
 }

=head1 DESCRIPTION

The body (content) of a message can be stored in various ways.  In this
manual-page you find the description of extra functionality you have
when a message contains attachments (parts).

=head1 OVERLOADED

overload: B<"">

=over 4

See L<Mail::Message::Body/"OVERLOADED">

=back

overload: B<'==' and '!='>

=over 4

See L<Mail::Message::Body/"OVERLOADED">

=back

overload: B<@{}>

=over 4

See L<Mail::Message::Body/"OVERLOADED">

=back

overload: B<bool>

=over 4

See L<Mail::Message::Body/"OVERLOADED">

=back

=head1 METHODS

=head2 Constructors

$obj-E<gt>B<clone>

=over 4

See L<Mail::Message::Body/"Constructors">

=back

Mail::Message::Body::Multipart-E<gt>B<new>(OPTIONS)

=over 4

 Option           --Defined in     --Default
 based_on           Mail::Message::Body  undef
 boundary                            undef
 charset            Mail::Message::Body  'PERL' or <undef>
 checked            Mail::Message::Body  <false>
 data               Mail::Message::Body  undef
 description        Mail::Message::Body  undef
 disposition        Mail::Message::Body  undef
 eol                Mail::Message::Body  'NATIVE'
 epilogue                            undef
 file               Mail::Message::Body  undef
 log                Mail::Reporter   'WARNINGS'
 message            Mail::Message::Body  undef
 mime_type          Mail::Message::Body  'multipart/mixed'
 modified           Mail::Message::Body  <false>
 parts                               undef
 preamble                            undef
 trace              Mail::Reporter   'WARNINGS'
 transfer_encoding  Mail::Message::Body  'none'

. based_on => BODY

. boundary => STRING

=over 4

Separator to be used between parts of the message.  This separator must
be unique in case the message contains nested multiparts (which are not
unusual).  If C<undef>, a nice unique boundary will be generated.

=back

. charset => CHARSET|'PERL'

. checked => BOOLEAN

. data => ARRAY-OF-LINES | STRING

. description => STRING|FIELD

. disposition => STRING|FIELD

. eol => 'CR'|'LF'|'CRLF'|'NATIVE'

. epilogue => BODY|STRING

=over 4

The text which is included in the main body after the final boundary.  This
is usually empty, and has no meaning.

Provide a BODY object or a STRING which will automatically translated
into a C<text/plain> body.

=back

. file => FILENAME|FILEHANDLE|IOHANDLE

. log => LEVEL

. message => MESSAGE

. mime_type => STRING|FIELD|MIME

. modified => BOOLEAN

. parts => ARRAY-OF-(MESSAGES|BODIES)

=over 4

Specifies an initial list of parts in this body.  These may be full
MESSAGES, or BODIES which transformed into messages before use.  Each
message is coerced into a L<Mail::Message::Part|Mail::Message::Part> object.

MIME::Entity and L<Mail::Internet|Mail::Internet> objects are acceptable in the
list, because they are coercible into L<Mail::Message::Part|Mail::Message::Part>'s.  Values
of C<undef> will be skipped silently.

=back

. preamble => BODY|STRING

=over 4

The text which is included in the body before the first part.  It is
common use to include a text to warn the user that the message is a
multipart.  However, this was useful in earlier days: most mail
agents are very capable in warning the user themselves.

Provide a BODY object or a STRING which will automatically translated
into a text/plain body.

=back

. trace => LEVEL

. transfer_encoding => STRING|FIELD

example: 

 my $intro = Mail::Message::Body->new(data => ['part one']);
 my $pgp   = Mail::Message::Body->new(data => ['part three']);

 my $body  = Mail::Message::Body::Multipart->new
   ( boundary => time . '--it-s-mine'
   , preamble => "This is a multi-part message in MIME format.\n\n"
   , parts    => [ $intro, $folder->message(3)->decoded, $pgp ]
   );

=back

=head2 Constructing a body

$obj-E<gt>B<attach>(MESSAGES|BODIES)

=over 4

Attach a list of MESSAGES to this multipart.  A new body is returned.
When you specify BODIES, they will first be translated into
real messages.  MIME::Entity and L<Mail::Internet|Mail::Internet> objects may be
specified too.  In any case, the parts will be coerced into
L<Mail::Message::Part|Mail::Message::Part>'s.

=back

$obj-E<gt>B<check>

=over 4

See L<Mail::Message::Body::Encode/"Constructing a body">

=back

$obj-E<gt>B<concatenate>(COMPONENTS)

=over 4

See L<Mail::Message::Body::Construct/"Constructing a body">

=back

$obj-E<gt>B<decoded>(OPTIONS)

=over 4

See L<Mail::Message::Body/"Constructing a body">

=back

$obj-E<gt>B<encode>(OPTIONS)

=over 4

See L<Mail::Message::Body::Encode/"Constructing a body">

=back

$obj-E<gt>B<encoded>

=over 4

See L<Mail::Message::Body::Encode/"Constructing a body">

=back

$obj-E<gt>B<eol>(['CR'|'LF'|'CRLF'|'NATIVE'])

=over 4

See L<Mail::Message::Body/"Constructing a body">

=back

$obj-E<gt>B<foreachComponent>(CODE)

=over 4

Execute the CODE for each component of the message: the preamble, the
epilogue, and each of the parts.

Each component is a body and is passed as second argument to the CODE.
The first argument is a reference to this multi-parted body.  The CODE
returns a body object.  When any of the returned bodies differs from
the body which was passed, then a new multi-part body will be returned.
Reference to the not-changed bodies and the changed bodies will be
included in that new multi-part.

example: 

 my $checked = $multi->foreachComponent(sub {$_[1]->check});

=back

$obj-E<gt>B<foreachLine>((CODE))

=over 4

It is NOT possible to call some code for each line of a multipart,
because that would not only inflict damage to the body of each
message part, but also to the headers and the part separators.

=back

$obj-E<gt>B<stripSignature>(OPTIONS)

=over 4

Removes all parts which contains data usually defined as being signature.
The L<MIME::Type|MIME::Type> module provides this knowledge.  A new multipart is
returned, containing the remaining parts.  No OPTIONS are defined yet,
although some may be specified, because this method overrules the
C<stripSignature> method for normal bodies.

 Option     --Defined in     --Default
 max_lines    Mail::Message::Body::Construct  10
 pattern      Mail::Message::Body::Construct  qr/^--\s?$/
 result_type  Mail::Message::Body::Construct  <same as current>

. max_lines => INTEGER|undef

. pattern => REGEX|STRING|CODE

. result_type => CLASS

=back

$obj-E<gt>B<unify>(BODY)

=over 4

See L<Mail::Message::Body::Encode/"Constructing a body">

=back

=head2 The body

$obj-E<gt>B<isDelayed>

=over 4

See L<Mail::Message::Body/"The body">

=back

$obj-E<gt>B<isMultipart>

=over 4

See L<Mail::Message::Body/"The body">

=back

$obj-E<gt>B<isNested>

=over 4

See L<Mail::Message::Body/"The body">

=back

$obj-E<gt>B<message>([MESSAGE])

=over 4

See L<Mail::Message::Body/"The body">

=back

=head2 About the payload

$obj-E<gt>B<charset>

=over 4

See L<Mail::Message::Body/"About the payload">

=back

$obj-E<gt>B<checked>([BOOLEAN])

=over 4

See L<Mail::Message::Body/"About the payload">

=back

$obj-E<gt>B<description>([STRING|FIELD])

=over 4

See L<Mail::Message::Body/"About the payload">

=back

$obj-E<gt>B<disposition>([STRING|FIELD])

=over 4

See L<Mail::Message::Body/"About the payload">

=back

$obj-E<gt>B<dispositionFilename>([DIRECTORY])

=over 4

See L<Mail::Message::Body::Encode/"About the payload">

=back

$obj-E<gt>B<isBinary>

=over 4

See L<Mail::Message::Body::Encode/"About the payload">

=back

$obj-E<gt>B<isText>

=over 4

See L<Mail::Message::Body::Encode/"About the payload">

=back

$obj-E<gt>B<mimeType>

=over 4

See L<Mail::Message::Body/"About the payload">

=back

$obj-E<gt>B<nrLines>

=over 4

See L<Mail::Message::Body/"About the payload">

=back

$obj-E<gt>B<size>

=over 4

See L<Mail::Message::Body/"About the payload">

=back

$obj-E<gt>B<transferEncoding>([STRING|FIELD])

=over 4

See L<Mail::Message::Body/"About the payload">

=back

$obj-E<gt>B<type>([STRING|FIELD])

=over 4

See L<Mail::Message::Body/"About the payload">

=back

=head2 Access to the payload

$obj-E<gt>B<boundary>([STRING])

=over 4

Returns the boundary which is used to separate the parts in this
body.  If none was read from file, then one will be assigned.  With
STRING you explicitly set the boundary to be used.

=back

$obj-E<gt>B<endsOnNewline>

=over 4

See L<Mail::Message::Body/"Access to the payload">

=back

$obj-E<gt>B<epilogue>

=over 4

Returns the epilogue; the text after the last message part (after the
last real attachment).
The epilogue is stored in a BODY object, and its encoding is taken
from the general multipart header.

=back

$obj-E<gt>B<file>

=over 4

See L<Mail::Message::Body/"Access to the payload">

=back

$obj-E<gt>B<lines>

=over 4

See L<Mail::Message::Body/"Access to the payload">

=back

$obj-E<gt>B<part>(INDEX)

=over 4

Returns only the part with the specified INDEX.  You may use a negative
value here, which counts from the back in the list.  Parts which are
flagged to be deleted are included in the count.

example: 

 $message->body->part(2)->print;
 $body->part(1)->delete;

=back

$obj-E<gt>B<parts>(['ALL'|'ACTIVE'|'DELETED'|'RECURSE'|FILTER])

=over 4

Return all parts by default, or when ALL is specified.  C<ACTIVE> returns
the parts which are not flagged for deletion, as opposite to C<DELETED>.
C<RECURSE> descents into all nested multiparts to collect all parts.

You may also specify a code reference which is called for each nested
part.  The first argument will be the message part.  When the code
returns true, the part is incorporated in the return list.

example: 

 print "Number of attachments: ",
     scalar $message->body->parts('ACTIVE');

 foreach my $part ($message->body->parts) {
     print "Type: ", $part->get('Content-Type');
 }

=back

$obj-E<gt>B<preamble>

=over 4

Returns the preamble; the text before the first message part (before the
first real attachment).
The preamble is stored in a BODY object, and its encoding is taken
from the multipart header.

=back

$obj-E<gt>B<print>([FILEHANDLE])

=over 4

See L<Mail::Message::Body/"Access to the payload">

=back

$obj-E<gt>B<printEscapedFrom>(FILEHANDLE)

=over 4

See L<Mail::Message::Body/"Access to the payload">

=back

$obj-E<gt>B<string>

=over 4

See L<Mail::Message::Body/"Access to the payload">

=back

$obj-E<gt>B<stripTrailingNewline>

=over 4

See L<Mail::Message::Body/"Access to the payload">

=back

$obj-E<gt>B<write>(OPTIONS)

=over 4

See L<Mail::Message::Body/"Access to the payload">

=back

=head2 Internals

$obj-E<gt>B<addTransferEncHandler>(NAME, CLASS|OBJECT)

Mail::Message::Body::Multipart-E<gt>B<addTransferEncHandler>(NAME, CLASS|OBJECT)

=over 4

See L<Mail::Message::Body::Encode/"Internals">

=back

$obj-E<gt>B<contentInfoFrom>(HEAD)

=over 4

See L<Mail::Message::Body/"Internals">

=back

$obj-E<gt>B<contentInfoTo>(HEAD)

=over 4

See L<Mail::Message::Body/"Internals">

=back

$obj-E<gt>B<fileLocation>([BEGIN,END])

=over 4

See L<Mail::Message::Body/"Internals">

=back

$obj-E<gt>B<getTransferEncHandler>(TYPE)

=over 4

See L<Mail::Message::Body::Encode/"Internals">

=back

$obj-E<gt>B<isModified>

=over 4

See L<Mail::Message::Body/"Internals">

=back

$obj-E<gt>B<load>

=over 4

See L<Mail::Message::Body/"Internals">

=back

$obj-E<gt>B<modified>([BOOLEAN])

=over 4

See L<Mail::Message::Body/"Internals">

=back

$obj-E<gt>B<moveLocation>([DISTANCE])

=over 4

See L<Mail::Message::Body/"Internals">

=back

$obj-E<gt>B<read>(PARSER, HEAD, BODYTYPE [,CHARS [,LINES]])

=over 4

See L<Mail::Message::Body/"Internals">

=back

=head2 Error handling

$obj-E<gt>B<AUTOLOAD>

=over 4

See L<Mail::Message::Body/"Error handling">

=back

$obj-E<gt>B<addReport>(OBJECT)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

Mail::Message::Body::Multipart-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Message::Body::Multipart-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Message::Body::Multipart-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

$obj-E<gt>B<DESTROY>

=over 4

See L<Mail::Reporter/"Cleanup">

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back

=head1 DETAILS

=head1 DIAGNOSTICS

Warning: Charset $name is not known

=over 4

The encoding or decoding of a message body encounters a character set which
is not understood by Perl's Encode module.

=back

Error: Data not convertible to a message (type is $type)

=over 4

An object which is not coercable into a L<Mail::Message::Part|Mail::Message::Part> object was
passed to the initiation.  The data is ignored.

=back

Warning: No decoder defined for transfer encoding $name.

=over 4

The data (message body) is encoded in a way which is not currently understood,
therefore no decoding (or recoding) can take place.

=back

Warning: No encoder defined for transfer encoding $name.

=over 4

The data (message body) has been decoded, but the required encoding is
unknown.  The decoded data is returned.

=back

Error: Package $package does not implement $method.

=over 4

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=back

Error: Unknown criterium $what to select parts.

=over 4

Valid choices fdr part selections are C<ALL>, C<ACTIVE>, C<DELETED>,
C<RECURSE> or a code reference.  However, some other argument was passed.

=back

Warning: Unknown line terminator $eol ignored

=over 4

=back

Error: You cannot use foreachLine on a multipart

=over 4

L<foreachLine()|Mail::Message::Body::Multipart/"METHODS"> should be used on decoded message bodies only, because
it would attempt to modify part-headers and separators as well, which is
clearly not acceptible.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.091,
built on September 06, 2009. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2009 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

