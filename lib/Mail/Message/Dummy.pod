
=head1 NAME

Mail::Message::Dummy - a placeholder for a missing messages


=head1 INHERITANCE

 Mail::Message::Dummy
   is a Mail::Message
   is a Mail::Reporter


=head1 SYNOPSIS



=head1 DESCRIPTION

Dummy messages are used by modules which maintain ordered lists
of messages, usually based on message-id.  A good example is
L<Mail::Box::Thread::Manager|Mail::Box::Thread::Manager>, which detects related messages by
scanning the known message headers for references to other messages.
As long as the referenced messages are not found inside the mailbox,
their place is occupied by a dummy.

Be careful when using modules which may create dummies.  Before trying to
access the header or body use L<isDummy()|Mail::Message/"The Message"> to check if the message is a
dummy message.



=head1 METHODS


=head2 Constructors


$obj-E<gt>B<clone>

=over 4

See L<Mail::Message/"Constructors">

=back

Mail::Message::Dummy-E<gt>B<coerce>(MESSAGE)

=over 4

See L<Mail::Message/"Constructors">

=back

Mail::Message::Dummy-E<gt>B<new>(MESSAGE-ID, OPTIONS)

=over 4

Create a new dummy message to occupy the space for
a real message with the specified MESSAGE-ID.

 Option      Defined in       Default                                                 
 body        L<Mail::Message>  <not used>                                              
 body_type   L<Mail::Message>  L<Mail::Message::Body::Lines|Mail::Message::Body::Lines>
 field_type  L<Mail::Message>  <not used>                                              
 head        L<Mail::Message>  <not used>                                              
 head_type   L<Mail::Message>  <not used>                                              
 labels      L<Mail::Message>  {}                                                      
 log         L<Mail::Reporter>  C<'WARNINGS'>                                           
 messageId   L<Mail::Message>  <required>                                              
 modified    L<Mail::Message>  <always false>                                          
 trace       L<Mail::Reporter>  C<'WARNINGS'>                                           
 trusted     L<Mail::Message>  <always true>                                           

. body OBJECT

. body_type CLASS

. field_type CLASS

. head OBJECT

. head_type CLASS

. labels ARRAY|HASH

. log LEVEL

. messageId STRING

. modified BOOLEAN

. trace LEVEL

. trusted BOOLEAN

I<Example:> 

 my $message = Mail::Message::Dummy->new($msgid);
 if($message->isDummy) {...}

=back

=head2 Constructing a message


$obj-E<gt>B<bounce>([RG-OBJECT|OPTIONS])

=over 4

See L<Mail::Message::Construct::Bounce/"Constructing a message">

=back

Mail::Message::Dummy-E<gt>B<build>([MESSAGE|BODY], CONTENT)

=over 4

See L<Mail::Message::Construct::Build/"Constructing a message">

=back

Mail::Message::Dummy-E<gt>B<buildFromBody>(BODY, [HEAD], HEADERS)

=over 4

See L<Mail::Message::Construct::Build/"Constructing a message">

=back

$obj-E<gt>B<forward>(OPTIONS)

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

$obj-E<gt>B<forwardPostlude>

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

$obj-E<gt>B<forwardPrelude>

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

$obj-E<gt>B<forwardSubject>(STRING)

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

Mail::Message::Dummy-E<gt>B<read>(FILEHANDLE|SCALAR|REF-SCALAR|ARRAY-OF-LINES, OPTIONS)

=over 4

See L<Mail::Message::Construct::Read/"Constructing a message">

=back

$obj-E<gt>B<rebuild>(OPTIONS)

=over 4

See L<Mail::Message::Construct::Rebuild/"Constructing a message">

=back

$obj-E<gt>B<reply>(OPTIONS)

=over 4

See L<Mail::Message::Construct::Reply/"Constructing a message">

=back

$obj-E<gt>B<replyPrelude>([STRING|FIELD|ADDRESS])

=over 4

See L<Mail::Message::Construct::Reply/"Constructing a message">

=back

$obj-E<gt>B<replySubject>(STRING)

Mail::Message::Dummy-E<gt>B<replySubject>(STRING)

=over 4

See L<Mail::Message::Construct::Reply/"Constructing a message">

=back

=head2 The Message


$obj-E<gt>B<container>

=over 4

See L<Mail::Message/"The Message">

=back

$obj-E<gt>B<isDummy>

=over 4

See L<Mail::Message/"The Message">

=back

$obj-E<gt>B<isPart>

=over 4

See L<Mail::Message/"The Message">

=back

$obj-E<gt>B<messageId>

=over 4

See L<Mail::Message/"The Message">

=back

$obj-E<gt>B<print>([FILEHANDLE])

=over 4

See L<Mail::Message/"The Message">

=back

$obj-E<gt>B<send>([MAILER], OPTIONS)

=over 4

See L<Mail::Message/"The Message">

=back

$obj-E<gt>B<size>

=over 4

See L<Mail::Message/"The Message">

=back

$obj-E<gt>B<toplevel>

=over 4

See L<Mail::Message/"The Message">

=back

$obj-E<gt>B<write>([FILEHANDLE])

=over 4

See L<Mail::Message/"The Message">

=back

=head2 The header


$obj-E<gt>B<bcc>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<cc>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<date>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<destinations>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<from>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<get>(FIELDNAME)

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<guessTimestamp>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<head>(...)

=over 4

=back

$obj-E<gt>B<nrLines>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<sender>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<study>(FIELDNAME)

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<subject>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<timestamp>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<to>

=over 4

See L<Mail::Message/"The header">

=back

=head2 The body


$obj-E<gt>B<body>([BODY])

=over 4

See L<Mail::Message/"The body">

=back

$obj-E<gt>B<decoded>(OPTIONS)

=over 4

See L<Mail::Message/"The body">

=back

$obj-E<gt>B<encode>(OPTIONS)

=over 4

See L<Mail::Message/"The body">

=back

$obj-E<gt>B<isMultipart>

=over 4

See L<Mail::Message/"The body">

=back

$obj-E<gt>B<isNested>

=over 4

See L<Mail::Message/"The body">

=back

$obj-E<gt>B<parts>(['ALL'|'ACTIVE'|'DELETED'|'RECURSE'|FILTER])

=over 4

See L<Mail::Message/"The body">

=back

=head2 Flags


$obj-E<gt>B<isDeleted>

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<isModified>

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<label>(LABEL [,VALUE [LABEL, VALUE] ])

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<labels>

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<labelsToStatus>

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<modified>([BOOLEAN])

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<statusToLabels>

=over 4

See L<Mail::Message/"Flags">

=back

=head2 The whole message as text


$obj-E<gt>B<file>

=over 4

See L<Mail::Message::Construct::Text/"The whole message as text">

=back

$obj-E<gt>B<lines>

=over 4

See L<Mail::Message::Construct::Text/"The whole message as text">

=back

$obj-E<gt>B<printStructure>([FILEHANDLE][, INDENT])

=over 4

See L<Mail::Message::Construct::Text/"The whole message as text">

=back

$obj-E<gt>B<string>

=over 4

See L<Mail::Message::Construct::Text/"The whole message as text">

=back

=head2 Internals


$obj-E<gt>B<isDelayed>

=over 4

See L<Mail::Message/"Internals">

=back

$obj-E<gt>B<readBody>(PARSER, HEAD [, BODYTYPE])

=over 4

See L<Mail::Message/"Internals">

=back

$obj-E<gt>B<readFromParser>(PARSER, [BODYTYPE])

=over 4

See L<Mail::Message/"Internals">

=back

$obj-E<gt>B<readHead>(PARSER [,CLASS])

=over 4

See L<Mail::Message/"Internals">

=back

$obj-E<gt>B<recursiveRebuildPart>(PART, OPTIONS)

=over 4

See L<Mail::Message::Construct::Rebuild/"Internals">

=back

$obj-E<gt>B<storeBody>(BODY)

=over 4

See L<Mail::Message/"Internals">

=back

$obj-E<gt>B<takeMessageId>([STRING])

=over 4

See L<Mail::Message/"Internals">

=back

=head2 Error handling


$obj-E<gt>B<AUTOLOAD>

=over 4

See L<Mail::Message::Construct/"METHODS">

=back

$obj-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

Mail::Message::Dummy-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Message::Dummy-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Message::Dummy-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<shortSize>([VALUE])

Mail::Message::Dummy-E<gt>B<shortSize>([VALUE])

=over 4

See L<Mail::Message/"Error handling">

=back

$obj-E<gt>B<shortString>

=over 4

See L<Mail::Message/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup


$obj-E<gt>B<DESTROY>

=over 4

See L<Mail::Message/"Cleanup">

=back

$obj-E<gt>B<destruct>

=over 4

See L<Mail::Message/"Cleanup">

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back



=head1 DIAGNOSTICS

I<Error:> Cannot include forward source as $include.

Unknown alternative for the L<forward(include)|Mail::Message::Construct::Forward/"Constructing a message">.  Valid choices are
C<NO>, C<INLINE>, and C<ATTACH>.

I<Error:> Cannot include reply source as $include.

Unknown alternative for the C<include> option of L<reply()|Mail::Message::Construct::Reply/"Constructing a message">.  Valid
choices are C<NO>, C<INLINE>, and C<ATTACH>.

I<Error:> Message-Id is required for a dummy.

A dummy message occupies the place for a real message.  When a dummy is created,
the id of the message which place it is holding must be known.

I<Error:> No address to create forwarded to.

If a forward message is created, a destination address must be specified.

I<Error:> No default mailer found to send message.

The message L<send()|Mail::Message/"The Message"> mechanism had not enough information to automatically
find a mail transfer agent to sent this message.  Specify a mailer
explicitly using the C<via> options.

I<Error:> Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

I<Error:> You cannot take the head/body of a dummy message

Dummy messages are place-holders in message threads: the thread detected
the existence of the message, because it found the message-id in a
Reply-To or References field, however it did not find the header and
body of the message yet.  Use L<isDummy()|Mail::Message/"The Message"> to check whether the thread
node returned a dummy or not.

I<Error:> no rebuild rule $name defined.



=head1 DETAILS






=head1 REFERENCES

See the MailBox website at L<http://perl.overmeer.net/mailbox/> for more details.

=head1 COPYRIGHTS

Distribution version 2.047.
Written by Mark Overmeer (mark@overmeer.net).  See the ChangeLog for
other contributors.

Copyright (c) 2001-2003 by the author(s). All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


