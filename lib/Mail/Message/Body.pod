
=head1 NAME

Mail::Message::Body - the data of a body in a message


=head1 INHERITANCE

 Mail::Message::Body has extra code in
   Mail::Message::Body::Construct
   Mail::Message::Body::Encode

 Mail::Message::Body
   is a Mail::Reporter

 Mail::Message::Body is extended by
   Mail::Message::Body::File
   Mail::Message::Body::Lines
   Mail::Message::Body::Multipart
   Mail::Message::Body::Nested
   Mail::Message::Body::String

 Mail::Message::Body is realized by
   Mail::Message::Body::Delayed


=head1 SYNOPSIS

 my Mail::Message $msg = ...;
 my $body  = $msg->body;
 my @text  = $body->lines;
 my $text  = $body->string;
 my IO::Handle $file = $body->file;
 $body->print(\*FILE);

 my $content_type = $body->type;
 my $transfer_encoding = $body->transferEncoding;
 my $encoded  = $body->encode(mime_type => 'text/html',
    charset => 'us-ascii', transfer_encoding => 'none');
 my $decoded  = $body->decoded;


=head1 DESCRIPTION

The encoding and decoding functionality of a L<Mail::Message::Body|Mail::Message::Body> is
implemented in the L<Mail::Message::Body::Encode|Mail::Message::Body::Encode> package.  That package is
automatically loaded when encoding and decoding of messages needs to take
place.  Methods to simply build an process body objects are implemented
in L<Mail::Message::Body::Construct|Mail::Message::Body::Construct>.

The body of a message (a L<Mail::Message|Mail::Message> object) is stored in one of the
many body types.  The functionality of each body type is equivalent, but there
are performance differences.  Each body type has its own documentation
with details about its implementation.


=head1 OVERLOADED


overload: B<"">

=over 4

(stringification) Returns the body as string --which will trigger
completion-- unless called to produce a string for C<Carp>.  The latter
to avoid deep recursions.

I<Example:> stringification of body


 print $msg->body;   # implicit by print

 my $body = $msg->body;
 my $x    = "$body"; # explicit by interpolation

=back

overload: B<'==' and '!='>

=over 4

(numeric comparison) compares if two references point to the
same message.  This only produces correct results is both arguments
are message references B<within the same folder>.

I<Example:> use of numeric comparison on a body


 my $skip = $folder->message(3);
 foreach my $msg (@$folder)
 {   next if $msg == $skip;
     $msg->send;
 }

=back

overload: B<@{}>

=over 4

When a body object is used as being an array reference, the lines of
the body are returned.  This is the same as using L<lines()|Mail::Message::Body/"Access to the payload">.

I<Example:> using a body as array


 print $body->lines->[1];  # second line
 print $body->[1];         # same

 my @lines = $body->lines;
 my @lines = @$body;       # same

=back

overload: B<bool>

=over 4

Always returns a true value, which is needed to have overloaded
objects to be used as in C<if($body)>.  Otherwise, C<if(defined $body)>
would be needed to avoid a runtime error.

=back


=head1 METHODS


=head2 Constructors


$obj-E<gt>B<clone>

=over 4

Return a copy of this body, usually to be included in a cloned
message. Use L<Mail::Message::clone()|Mail::Message/"Constructors"> for a whole message.

=back

Mail::Message::Body-E<gt>B<new>(OPTIONS)

=over 4

BE WARNED that, what you specify here are encodings and such which are
already in place.  The options will not trigger conversions.  When you
need conversions, first create a body with options which tell what you've
got, and then call L<encode()|Mail::Message::Body::Encode/"Constructing a body"> for what you need.

 Option             Defined in       Default        
 based_on                            undef          
 charset                             C<'us-ascii'>  
 checked                             <false>        
 data                                undef          
 disposition                         undef          
 eol                                 C<'NATIVE'>    
 file                                undef          
 log                L<Mail::Reporter>  C<'WARNINGS'>  
 message                             undef          
 mime_type                           C<'text/plain'>
 modified                            <false>        
 trace              L<Mail::Reporter>  C<'WARNINGS'>  
 transfer_encoding                   C<'none'>      

. based_on BODY

=over 4

The information about encodings must be taken from the specified BODY,
unless specified differently.

=back

. charset STRING

=over 4

Defines the character-set which is used in the data.  Only useful in
combination with a C<mime_type> which refers to C<text> in any shape.
This field is case-insensitive.

=back

. checked BOOLEAN

=over 4

Whether the added information has been check not to contain illegal
octets with respect to the transfer encoding and mime type.  If not
checked, and then set as body for a message, it will be.

=back

. data ARRAY-OF-LINES | STRING

=over 4

The content of the body.  The only way to set the content of a body
is during the creation of the body.  So if you want to modify the content
of a message, you need to create a new body with the new content and
add that to the body.  The reason behind this, is that correct encodings
and body information must be guaranteed.  It avoids your hassle in
calculating the number of lines in the body, and checking whether bad
characters are enclosed in text.

Specify a reference to an ARRAY of lines, each terminated by a newline.
Or one STRING which may contain multiple lines, separated and terminated
by a newline.

=back

. disposition STRING|FIELD

=over 4

How this message can be decomposed.  The data relates to the
C<Content-Disposition> field.  Specify a STRING which will become the
field content, or a real FIELD.

The content of this field is specified in RFC 1806.  The body of the
field can be C<inline>, to indicate that the body is intended to be
displayed automatically upon display of the message. Use C<attachment>
to indicate that they are separate from the main body of the mail
message, and that their display should not be automatic, but contingent
upon some further action of the user.

The C<filename> attribute specifies a name to which is suggested to the
reader of the message when it is extracted.

=back

. eol 'CR'|'LF'|'CRLF'|'NATIVE'

=over 4

Convert the message into having the specified string as line terminator
for all lines in the body.  C<NATIVE> is used to represent the C<\n>
on the current platform and will be translated in the applicable one.

BE WARNED that folders with a non-native encoding may appear on your
platform, for instance in Windows folders handled from a UNIX system.
The eol encoding has effect on the size of the body!

=back

. file FILENAME|FILEHANDLE|IOHANDLE

=over 4

Read the data from the specified file, file handle, or object of
type C<IO::Handle>.

=back

. log LEVEL

. message MESSAGE

=over 4

The message where this body belongs to.

=back

. mime_type STRING|FIELD|MIME

=over 4

The type of data which is added.  You may specify a content of a header
line as STRING, or a FIELD object.  You may also specify a L<MIME::Type|MIME::Type>
object.  In any case, it will be kept internally as
a real field (a L<Mail::Message::Field|Mail::Message::Field> object).  This relates to the
C<Content-Type> header field.

A mime-type specification consists of two parts: a general class (C<text>,
C<image>, C<application>, etc) and a specific sub-class.  Examples for
specific classes with C<text> are C<plain>, C<html>, and C<xml>.  This
field is case-insensitive but case preserving.  The default mime-type
is C<text/plain>,

=back

. modified BOOLEAN

=over 4

Whether the body is flagged modified, directly from its creation.

=back

. trace LEVEL

. transfer_encoding STRING|FIELD

=over 4

The encoding that the data has.  If the data is to be encoded, than you
will have to call L<encode()|Mail::Message::Body::Encode/"Constructing a body"> after the body is created.  That will
return a new encoded body.  This field is case-insensitive and relates
to the C<Content-Transfer-Encoding> field in the header.

=back

I<Example:> 

 my $body = Mail::Message::Body::String->new(file => \*IN,
    mime_type => 'text/html; charset="ISO-8859-1"');

 my $body = Mail::Message::Body::Lines->new(data => ['first', $second],
    charset => 'ISO-10646', transfer_encoding => 'none');

 my $body = Mail::Message::Body::Lines->new(data => \@lines,
    transfer_encoding => 'base64');

 my $body = Mail::Message::Body::Lines->new(file => 'picture.gif',
    mime_type => 'image/gif');

=back

=head2 Constructing a body


$obj-E<gt>B<attach>(MESSAGES, OPTIONS)

=over 4

See L<Mail::Message::Body::Construct/"Constructing a body">

=back

$obj-E<gt>B<check>

=over 4

See L<Mail::Message::Body::Encode/"Constructing a body">

=back

$obj-E<gt>B<concatenate>(COMPONENTS)

=over 4

See L<Mail::Message::Body::Construct/"Constructing a body">

=back

$obj-E<gt>B<decoded>(OPTIONS)

=over 4

Returns a body, an object which is (a sub-)class of a L<Mail::Message::Body|Mail::Message::Body>,
which contains a simplified representation of textual data.  The returned
object may be the object where this is called on, but may also be a new
body of any type.

 my $dec = $body->decoded;
 
is equivalent with

 my $dec = $body->encode(mime_type => 'text/plain', charset => 'us-ascii',
    transfer_encoding => 'none');

The C<$dec> which is returned is a body.  Ask with the L<mimeType()|Mail::Message::Body/"About the payload"> method
what is produced.  This C<$dec> body is B<not related to a header>.

 Option       Defined in  Default          
 result_type              <same as current>

. result_type CLASS

=back

$obj-E<gt>B<encode>(OPTIONS)

=over 4

See L<Mail::Message::Body::Encode/"Constructing a body">

=back

$obj-E<gt>B<encoded>

=over 4

See L<Mail::Message::Body::Encode/"Constructing a body">

=back

$obj-E<gt>B<eol>(['CR'|'LF'|'CRLF'|'NATIVE'])

=over 4

Returns the character (or characters) which are used to separate lines
within this body.  When a kind of separator is specified, the body
is translated to contain the specified line endings.

=back

$obj-E<gt>B<foreachLine>(CODE)

=over 4

See L<Mail::Message::Body::Construct/"Constructing a body">

=back

$obj-E<gt>B<stripSignature>(OPTIONS)

=over 4

See L<Mail::Message::Body::Construct/"Constructing a body">

=back

$obj-E<gt>B<unify>(BODY)

=over 4

See L<Mail::Message::Body::Encode/"Constructing a body">

=back

=head2 The body


$obj-E<gt>B<isDelayed>

=over 4

Returns a true or false value, depending on whether the body of this
message has been read from file.  This can only false for a
L<Mail::Message::Body::Delayed|Mail::Message::Body::Delayed>.

=back

$obj-E<gt>B<isMultipart>

=over 4

Returns whether this message-body contains parts which are messages
by themselves.

=back

$obj-E<gt>B<isNested>

=over 4

Only true for a message body which contains exactly one sub-message:
the C<Mail::Message::Body::Nested> body type.

=back

$obj-E<gt>B<message>([MESSAGE])

=over 4

Returns the message where this body belongs to, optionally setting it
to a new MESSAGE first.  If C<undef> is passed, the body will be
disconnected from the message.

=back

=head2 About the payload


$obj-E<gt>B<charset>

=over 4

Returns the character set which is used in the text body as string.  This
is part of the result of what the C<type> method returns.

=back

$obj-E<gt>B<checked>([BOOLEAN])

=over 4

Returns whether the body encoding has been checked or not (optionally
after setting the flag to a new value).

=back

$obj-E<gt>B<disposition>([STRING|FIELD])

=over 4

Returns (optionally after setting) how the message can be disposed
(unpacked).  The related header field is C<Content-Disposition>.
A L<Mail::Message::Field|Mail::Message::Field> object is returned (which stringifies into
the field content).  The field content will be C<none> if no disposition
was specified.

The argument can be a STRING (which is converted into a field), or a
fully prepared header field.

=back

$obj-E<gt>B<dispositionFilename>(DIRECTORY)

=over 4

See L<Mail::Message::Body::Encode/"About the payload">

=back

$obj-E<gt>B<isBinary>

=over 4

See L<Mail::Message::Body::Encode/"About the payload">

=back

$obj-E<gt>B<isText>

=over 4

See L<Mail::Message::Body::Encode/"About the payload">

=back

$obj-E<gt>B<mimeType>

=over 4

Returns a L<MIME::Type|MIME::Type> object which is related to this body's type.  This
differs from the C<type> method, which results in a L<Mail::Message::Field|Mail::Message::Field>.

I<Example:> 

 if($body->mimeType eq 'text/html') {...}
 print $body->mimeType->simplified;

=back

$obj-E<gt>B<nrLines>

=over 4

Returns the number of lines in the message body.  For multi-part messages,
this includes the header lines and boundaries of all the parts.

=back

$obj-E<gt>B<size>

=over 4

The total number of bytes in the message body. The size of the body
is computed in the shape it is in. For example, if this is a base64
encoded message, the size of the encoded data is returned; you may
want to call L<Mail::Message::decoded()|Mail::Message/"The body"> first.

=back

$obj-E<gt>B<transferEncoding>([STRING|FIELD])

=over 4

Returns the transfer-encoding of the data within this body as
L<Mail::Message::Field|Mail::Message::Field> (which stringifies to its content).  If it
needs to be changed, call the L<encode()|Mail::Message::Body::Encode/"Constructing a body"> or L<decoded()|Mail::Message::Body/"Constructing a body"> method.
When no encoding is present, the field contains the text C<none>.

The optional STRING or FIELD enforces a new encoding to be set, without the
actual required translations.

I<Example:> 

 my $transfer = $msg->decoded->transferEncoding;
 $transfer->print;   # --> Content-Encoding: base64
 print $transfer;    # --> base64

 if($msg->body->transferEncoding eq 'none') {...}

=back

$obj-E<gt>B<type>([STRING|FIELD])

=over 4

Returns the type of information the body contains as
L<Mail::Message::Field|Mail::Message::Field> object.  The type is taken from the header
field C<Content-Type>. If the header did not contain that field,
then you will get a default field containing C<text/plain>.

You usually can better use L<mimeType()|Mail::Message::Body/"About the payload">, because that will return a
clever object with type information.

I<Example:> 

 my $msg     = $folder->message(6);
 $msg->get('Content-Type')->print;
    # --> Content-Type: text/plain; charset="us-ascii"

 my $content = $msg->decoded;
 my $type    = $content->type;

 print "This is a $type message\n";
    # --> This is a text/plain; charset="us-ascii" message

 print "This is a ", $type->body, "message\n";
    # --> This is a text/plain message

 print "Comment: ", $type->comment, "\n";
    # --> Comment: charset="us-ascii"

=back

=head2 Access to the payload


$obj-E<gt>B<file>

=over 4

Return the content of the body as a file handle.  The returned stream may
be a real file, or a simulated file in any form that Perl supports.  While
you may not be able to write to the file handle, you can read from it.

WARNING: Even if the file handle supports writing, do not write
to the file handle. If you do, some of the internal values of the
L<Mail::Message::Body|Mail::Message::Body> may not be updated.

=back

$obj-E<gt>B<lines>

=over 4

Return the content of the body as a list of lines (in LIST context) or a
reference to an array of lines (in SCALAR context).  In scalar context the
array of lines is cached to avoid needless copying and therefore provide
much faster access for large messages.

To just get the number of lines in the body, use the L<nrLines()|Mail::Message::Body/"About the payload"> method,
which is usually much more efficient.

BE WARNED: For some types of bodies the reference will refer to the
original data. You must not change the referenced data! If you do, some of
the essential internal variables of the L<Mail::Message::Body|Mail::Message::Body> may not be
updated.

I<Example:> 

 my @lines    = $body->lines;     # copies lines
 my $line3    = ($body->lines)[3] # only one copy
 print $lines[0];

 my $linesref = $body->lines;     # reference to originals
 my $line3    = $body->lines->[3] # only one copy (faster)
 print $linesref->[0];

 print $body->[0];                # by overloading

=back

$obj-E<gt>B<print>([FILEHANDLE])

=over 4

Print the body to the specified FILEHANDLE (defaults to the selected handle).
The handle may be a GLOB, an IO::File object, or... any object with a
C<print()> method will do.  Nothing useful is returned.

=back

$obj-E<gt>B<printEscapedFrom>(FILEHANDLE)

=over 4

Print the body to the specified FILEHANDLE but all lines which start
with 'From ' (optionally already preceded by E<gt>'s) will habe an E<gt>
added in front.  Nothing useful is returned.

=back

$obj-E<gt>B<string>

=over 4

Return the content of the body as a scalar (a single string).  This is
a copy of the internally kept information.

I<Example:> 

 my $text = $body->string;
 print "Body: $body\n";     # by overloading

=back

$obj-E<gt>B<write>(OPTIONS)

=over 4

Write the content of the body to a file.  Be warned that you may want to
decode the body before writing it!

 Option    Defined in  Default   
 filename              <required>

. filename FILENAME

I<Example:> write the data to a file


 use File::Temp;
 my $fn = tempfile;
 $message->decoded->write(filename => $fn)
    or die "Couldn't write to $fn: $!\n";

I<Example:> using the content-disposition information to write


 use File::Temp;
 my $dir = tempdir; mkdir $dir or die;
 my $fn  = $message->body->dispositionFilename($dir);
 $message->decoded->write(filename => $fn)
    or die "Couldn't write to $fn: $!\n";

=back

=head2 Internals


$obj-E<gt>B<addTransferEncHandler>(NAME, CLASS|OBJECT)

Mail::Message::Body-E<gt>B<addTransferEncHandler>(NAME, CLASS|OBJECT)

=over 4

See L<Mail::Message::Body::Encode/"Internals">

=back

$obj-E<gt>B<contentInfoFrom>(HEAD)

=over 4

Transfer the body related info from the header into this body.

=back

$obj-E<gt>B<contentInfoTo>(HEAD)

=over 4

Copy the content information (the C<Content-*> fields) into the specified
HEAD.  The body was created from raw data without the required information,
which must be added.  See also L<contentInfoFrom()|Mail::Message::Body/"Internals">.

=back

$obj-E<gt>B<fileLocation>([BEGIN,END])

=over 4

The location of the body in the file.  Returned a list containing begin and
end.  The begin is the offsets of the first byte if the folder used for
this body.  The end is the offset of the first byte of the next message.

=back

$obj-E<gt>B<getTransferEncHandler>(TYPE)

=over 4

See L<Mail::Message::Body::Encode/"Internals">

=back

$obj-E<gt>B<isModified>

=over 4

Returns whether the body has changed.

=back

$obj-E<gt>B<load>

=over 4

Be sure that the body is loaded.  This returns the loaded body.

=back

$obj-E<gt>B<modified>([BOOLEAN])

=over 4

Change the body modification flag.  This will force a re-write of the body
to a folder file when it is closed.  It is quite dangerous to change the
body: the same body may be shared between messages within your program.

Especially be warned that you have to change the message-id when you
change the body of the message: no two messages should have the same id.

Without value, the current setting is returned, although you can better use
L<isModified()|Mail::Message::Body/"Internals">.

=back

$obj-E<gt>B<moveLocation>([DISTANCE])

=over 4

Move the registration of the message to a new location over DISTANCE.  This
is called when the message is written to a new version of the same
folder-file.

=back

$obj-E<gt>B<read>(PARSER, HEAD, BODYTYPE [,CHARS [,LINES]])

=over 4

Read the body with the PARSER from file. The implementation of this method
will differ between types of bodies.  The BODYTYPE argument is a class name
or a code reference of a routine which can produce a class name, and is
used in multipart bodies to determine the type of the body for each part.

The CHARS argument is the estimated number of bytes in the body, or
C<undef> when this is not known.  This data can sometimes be derived from
the header (the C<Content-Length> line) or file-size.

The second argument is the estimated number of LINES of the body.  It is less
useful than the CHARS but may be of help determining whether the message
separator is trustworthy.  This value may be found in the C<Lines> field
of the header.

=back

=head2 Error handling


$obj-E<gt>B<AUTOLOAD>

=over 4

When an unknown method is called on a message body object, this may
not be problematic.  For performance reasons, some methods are
implemented in separate files, and only demand-loaded.  If this
delayed compilation of additional modules does not help, an error
will be produced.

=back

$obj-E<gt>B<addReport>(OBJECT)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

Mail::Message::Body-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Message::Body-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Message::Body-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup


$obj-E<gt>B<DESTROY>

=over 4

See L<Mail::Reporter/"Cleanup">

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back



=head1 DIAGNOSTICS

I<Warning:> No decoder defined for transfer encoding $name.

The data (message body) is encoded in a way which is not currently understood,
therefore no decoding (or recoding) can take place.

I<Warning:> No encoder defined for transfer encoding $name.

The data (message body) has been decoded, but the required encoding is
unknown.  The decoded data is returned.

I<Error:> Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.


=head1 DETAILS


=head2 Access to the body

A body can be contained in a message, but may also live without a message.
In both cases it stores data, and the same questions can be asked: what
type of data it is, how many bytes and lines, what encoding is used.  Any
body can be encoded and decoded, returning a new body object.  However, 
bodies which are part of a message will always be in a shape that they can
be written to a file or send to somewhere: they will be encoded if needed.

I<Example:> 

 my $body    = Mail::Message::Body::String->new(mime_type => 'image/gif');
 $body->print(\*OUT);    # this is binary image data...

 my $encoded = $message->body($body);
 $encoded->print(\*OUT); # ascii data, encoded image

Now encoded refers to the body of the C<$message> which is the content of
C<$body> in a shape that it can be transmitted.  Usually C<base64> encoding
is used.

=head2 Body class implementation

The body of a message can be stored in many ways.  Roughtly, the
implementations can be split in two groups: the data collectors and
the complex bodies.  The primer implement various ways to access data,
and are full compatible: they only differ in performance and memory
footprint under different circumstances.  The latter are created to
handle complex multiparts and lazy extraction.

=head3 Data collector bodies

=over 4

=item * L<Mail::Message::Body::String|Mail::Message::Body::String>

The whole message body is stored in one scalar.  Small messages can be
contained this way without performance penalties.

=item * L<Mail::Message::Body::Lines|Mail::Message::Body::Lines>

Each line of the message body is stored as single scalar.  This is a
useful representation for a detailed look in the message body, which is
usually line-organized.

=item * L<Mail::Message::Body::File|Mail::Message::Body::File>

The message body is stored in an external temporary file.  This type of
storage is especially useful when the body is large, the total folder is
large, or memory is limited.

=item * Mail::Message::Body::InFolder

NOT IMPLEMENTED YET.
The message is kept in the folder, and is only taken out when the
content is changed.

=item * Mail::Message::Body::External

NOT IMPLEMENTED YET.
The message is kept in a separate file, usually because the message body
is large.  The difference with the C<::External> object is that this external
storage stays this way between closing and opening of a folder. The
C<::External> object only uses a file when the folder is open.

=back

=head3 Complex bodies

=over 4

=item * L<Mail::Message::Body::Delayed|Mail::Message::Body::Delayed>

The message-body is not yet read, but the exact location of the
body is known so the message can be read when needed.  This is part of
the lazy extraction mechanism.  Once extracted, the object can become
any simple or complex body.

=item * L<Mail::Message::Body::Multipart|Mail::Message::Body::Multipart>

The message body contains a set of sub-messages (which can contain
multipart bodies themselves).  Each sub-message is an instance
of L<Mail::Message::Part|Mail::Message::Part>, which is an extension of L<Mail::Message|Mail::Message>.

=item * L<Mail::Message::Body::Nested|Mail::Message::Body::Nested>

Nested messages, like C<message/rfc822>: they contain a message in
the body.  For most code, they simply behave like multiparts.

=back





=head1 REFERENCES

See the MailBox website at L<http://perl.overmeer.net/mailbox/> for more details.

=head1 COPYRIGHTS

Distribution version 2.053.
Written by Mark Overmeer (mark@overmeer.net).  See the ChangeLog for
other contributors.

Copyright (c) 2001-2003 by the author(s). All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


