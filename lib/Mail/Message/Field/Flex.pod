
=head1 NAME

Mail::Message::Field::Flex - one line of a message header


=head1 INHERITANCE

 Mail::Message::Field::Flex
   is a Mail::Message::Field
   is a Mail::Reporter


=head1 SYNOPSIS



=head1 DESCRIPTION

This is the flexible implementation of a field: it can easily be
extended because it stores its data in a hash and the constructor
(C<new>) and initializer (C<init>) are split.  However, you pay the
price in performance.  L<Mail::Message::Field::Fast|Mail::Message::Field::Fast> is faster (as the
name predicts).


=head1 OVERLOADED


overload: B<"">

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<+0>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<<=>>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<bool>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<cmp>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back


=head1 METHODS


=head2 Constructors


$obj-E<gt>B<clone>

=over 4

See L<Mail::Message::Field/"Constructors">

=back

Mail::Message::Field::Flex-E<gt>B<new>(DATA)

=over 4

If you stick to this flexible class of header fields, you have a bit
more facilities than with L<Mail::Message::Field::Fast|Mail::Message::Field::Fast>.  Amongst it, you
can specify options with the creation.  Possible arguments:

=over 4

=item * B<new> LINE

ass a LINE as it could be found in a file: a (possibly folded) line
which is terminated by a new-line.

=item * B<new> NAME, (BODY|OBJECTS), [ATTRIBUTES], OPTIONS

A set of values which shape the line.

=back

To be able to distinguish the different parameters, you will have
to specify the OPTIONS as ARRAY of option pairs, or HASH of options.
The ATTRIBUTES are a flat list of key-value pairs.  The body is
specified as one BODY string, one OBJECT, or a reference to an array
of OBJECTS.  See L<Mail::Message::Field|Mail::Message::Field>:

 Option      Defined in       Default      
 attributes                   C<[]>        
 comment                      undef        
 log         L<Mail::Reporter>  C<'WARNINGS'>
 trace       L<Mail::Reporter>  C<'WARNINGS'>

. attributes ATTRS

=over 4

Reference to array with list of key-value pairs representing attributes,
or reference to a hash containing these pairs.  This is an alternative
notation for specifying ATTRIBUTES directly as method arguments.

=back

. comment STRING

=over 4

A pre-formatted list of attributes.

=back

. log LEVEL

. trace LEVEL

=back

=head2 The field


$obj-E<gt>B<isStructured>

Mail::Message::Field::Flex-E<gt>B<isStructured>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<length>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<nrLines>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<print>([FILEHANDLE])

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<size>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<string>([WRAP])

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<toDisclose>

=over 4

See L<Mail::Message::Field/"The field">

=back

=head2 Access to the name


$obj-E<gt>B<Name>

=over 4

See L<Mail::Message::Field/"Access to the name">

=back

$obj-E<gt>B<name>

=over 4

See L<Mail::Message::Field/"Access to the name">

=back

$obj-E<gt>B<wellformedName>([STRING])

=over 4

See L<Mail::Message::Field/"Access to the name">

=back

=head2 Access to the body


$obj-E<gt>B<body>

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<folded>

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<foldedBody>([BODY])

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<stripCFWS>([STRING])

Mail::Message::Field::Flex-E<gt>B<stripCFWS>([STRING])

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<unfoldedBody>([BODY, [WRAP]])

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

=head2 Access to the content


$obj-E<gt>B<addresses>

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<attribute>(NAME [, VALUE])

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<comment>([STRING])

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<study>

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<toDate>([TIME])

Mail::Message::Field::Flex-E<gt>B<toDate>([TIME])

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<toInt>

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

=head2 Other methods


$obj-E<gt>B<dateToTimestamp>(STRING)

Mail::Message::Field::Flex-E<gt>B<dateToTimestamp>(STRING)

=over 4

See L<Mail::Message::Field/"Other methods">

=back

=head2 Internals


$obj-E<gt>B<consume>(LINE | (NAME,BODY|OBJECTS))

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<defaultWrapLength>([LENGTH])

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<fold>(NAME, BODY, [MAXCHARS])

Mail::Message::Field::Flex-E<gt>B<fold>(NAME, BODY, [MAXCHARS])

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<setWrapLength>([LENGTH])

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<stringifyData>(STRING|ARRAY|OBJECTS)

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<unfold>(STRING)

=over 4

See L<Mail::Message::Field/"Internals">

=back

=head2 Error handling


$obj-E<gt>B<AUTOLOAD>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<addReport>(OBJECT)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

Mail::Message::Field::Flex-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Message::Field::Flex-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Message::Field::Flex-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup


$obj-E<gt>B<DESTROY>

=over 4

See L<Mail::Reporter/"Cleanup">

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back



=head1 DIAGNOSTICS

I<Warning:> Field content is not numerical: $content

The numeric value of a field is requested (for instance the C<Lines> or
C<Content-Length> fields should be numerical), however the data contains
weird characters.

I<Warning:> Illegal character in field name $name

A new field is being created which does contain characters not permitted
by the RFCs.  Using this field in messages may break other e-mail clients
or transfer agents, and therefore mutulate or extinguish your message.

I<Error:> Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.


=head1 DETAILS






=head1 REFERENCES

See the MailBox website at L<http://perl.overmeer.net/mailbox/> for more details.

=head1 COPYRIGHTS

Distribution version 2.055.
Written by Mark Overmeer (mark@overmeer.net).  See the ChangeLog for
other contributors.

Copyright (c) 2001-2003 by the author(s). All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


