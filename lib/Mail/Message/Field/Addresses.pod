=head1 NAME

Mail::Message::Field::Addresses - Fields with e-mail addresses

=head1 INHERITANCE

 Mail::Message::Field::Addresses
   is a Mail::Message::Field::Structured
   is a Mail::Message::Field::Full
   is a Mail::Message::Field
   is a Mail::Reporter

=head1 SYNOPSIS

 my $f = Mail::Message::Field->new(Cc =>
                'Mail::Box <mailbox@overmeer.net>');

 my $cc = Mail::Message::Field->new('Cc');
 $cc->addAddress('Mail::Box <mailbox@overmeer.net>');
 $cc->addAddress
   ( phrase  => 'Mail::Box'
   , email   => 'mailbox@overmeer.net'
   , comment => 'Our mailing list'     # deprecated by RFC
   );

 mu $ma = Mail::Message::Field::Address->new(...);
 $cc->addAddress($ma);

 my $mi = Mail::Identity->new(...);
 $cc->addAddress($mi);

 my $g  = Mail::Message::Field::AddrGroup->new(...);
 $cc->addGroup($g);

=head1 DESCRIPTION

All header fields which contain e-mail addresses only.  Not all address
fields have the same possibilities, but they are all parsed the same:
you never know how broken the applications are which produce those
messages.

When you try to create constructs which are not allowed for a certain
kind of field, you will be warned.

=head1 OVERLOADED

overload: B<"">

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<+0>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<<=>>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<bool>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<cmp>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<stringification>

=over 4

See L<Mail::Message::Field::Full/"OVERLOADED">

=back

=head1 METHODS

=head2 Constructors

$obj-E<gt>B<clone>

=over 4

See L<Mail::Message::Field/"Constructors">

=back

Mail::Message::Field::Addresses-E<gt>B<from>(FIELD, OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Constructors">

=back

Mail::Message::Field::Addresses-E<gt>B<new>

=over 4

 Option    --Defined in     --Default
 attributes  Mail::Message::Field::Structured  <ignored>
 charset     Mail::Message::Field::Full  undef
 datum       Mail::Message::Field::Structured  undef
 encoding    Mail::Message::Field::Full  'q'
 force       Mail::Message::Field::Full  false
 language    Mail::Message::Field::Full  undef
 log         Mail::Reporter   'WARNINGS'
 trace       Mail::Reporter   'WARNINGS'

. attributes => ATTRS

. charset => STRING

. datum => STRING

. encoding => 'q'|'Q'|'b'|'B'

. force => BOOLEAN

. language => STRING

. log => LEVEL

. trace => LEVEL

=back

=head2 The field

$obj-E<gt>B<isStructured>

Mail::Message::Field::Addresses-E<gt>B<isStructured>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<length>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<nrLines>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<print>([FILEHANDLE])

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<size>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<string>([WRAP])

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<toDisclose>

=over 4

See L<Mail::Message::Field/"The field">

=back

=head2 Access to the name

$obj-E<gt>B<Name>

=over 4

See L<Mail::Message::Field/"Access to the name">

=back

$obj-E<gt>B<name>

=over 4

See L<Mail::Message::Field/"Access to the name">

=back

$obj-E<gt>B<wellformedName>([STRING])

=over 4

See L<Mail::Message::Field/"Access to the name">

=back

=head2 Access to the body

$obj-E<gt>B<body>

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<decodedBody>(OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Access to the body">

=back

$obj-E<gt>B<folded>

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<foldedBody>([BODY])

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<stripCFWS>([STRING])

Mail::Message::Field::Addresses-E<gt>B<stripCFWS>([STRING])

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<unfoldedBody>([BODY, [WRAP]])

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

=head2 Access to the content

$obj-E<gt>B<addAddress>([ADDRESS], OPTIONS)

=over 4

Add an ADDRESS to the field.  The addresses are organized in groups.  If no
group is specified, the default group is taken to store the address in.  If
no ADDRESS is specified, the option must be sufficient to create a
L<Mail::Message::Field::Address|Mail::Message::Field::Address> from.  See the OPTIONS of
L<Mail::Message::Field::Address::new()|Mail::Identity/"METHODS">.

 Option--Default
 group   ''

. group => STRING

=back

$obj-E<gt>B<addAttribute>(...)

=over 4

Attributes are not supported for address fields.

=back

$obj-E<gt>B<addGroup>(GROUP|OPTIONS)

=over 4

Add a group of addresses to this field.  A GROUP can be specified, which
is a L<Mail::Message::Field::AddrGroup|Mail::Message::Field::AddrGroup> object, or one is created for you
using the OPTIONS.  The group is returned.

 Option--Default
 name    ''

. name => STRING

=back

$obj-E<gt>B<addresses>

=over 4

Returns a list with all addresses defined in any group of addresses:
all addresses which are specified on the line.  The addresses are
L<Mail::Message::Field::Address|Mail::Message::Field::Address> objects.

example: 

 my @addr = $field->addresses;

=back

$obj-E<gt>B<attribute>(OBJECT|(STRING, OPTIONS)|(NAME,VALUE,OPTIONS))

=over 4

See L<Mail::Message::Field::Structured/"Access to the content">

=back

$obj-E<gt>B<attributes>

=over 4

See L<Mail::Message::Field::Structured/"Access to the content">

=back

$obj-E<gt>B<beautify>

=over 4

See L<Mail::Message::Field::Full/"Access to the content">

=back

$obj-E<gt>B<comment>([STRING])

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<createComment>(STRING, OPTIONS)

Mail::Message::Field::Addresses-E<gt>B<createComment>(STRING, OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Access to the content">

=back

$obj-E<gt>B<createPhrase>(STRING, OPTIONS)

Mail::Message::Field::Addresses-E<gt>B<createPhrase>(STRING, OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Access to the content">

=back

$obj-E<gt>B<group>(NAME)

=over 4

Returns the group of addresses with the specified NAME, or C<undef>
if it does not exist.  If NAME is C<undef>, then the default groep
is returned.

=back

$obj-E<gt>B<groupNames>

=over 4

Returns a list with all group names which are defined.

=back

$obj-E<gt>B<groups>

=over 4

Returns all address groups which are defined in this field.  Each
element is a L<Mail::Message::Field::AddrGroup|Mail::Message::Field::AddrGroup> object.

=back

$obj-E<gt>B<study>

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<toDate>([TIME])

Mail::Message::Field::Addresses-E<gt>B<toDate>([TIME])

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<toInt>

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

=head2 Other methods

$obj-E<gt>B<dateToTimestamp>(STRING)

Mail::Message::Field::Addresses-E<gt>B<dateToTimestamp>(STRING)

=over 4

See L<Mail::Message::Field/"Other methods">

=back

=head2 Internals

$obj-E<gt>B<consume>(LINE | (NAME,BODY|OBJECTS))

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<decode>(STRING, OPTIONS)

Mail::Message::Field::Addresses-E<gt>B<decode>(STRING, OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Internals">

=back

$obj-E<gt>B<defaultWrapLength>([LENGTH])

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<encode>(STRING, OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Internals">

=back

$obj-E<gt>B<fold>(NAME, BODY, [MAXCHARS])

Mail::Message::Field::Addresses-E<gt>B<fold>(NAME, BODY, [MAXCHARS])

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<setWrapLength>([LENGTH])

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<stringifyData>(STRING|ARRAY|OBJECTS)

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<unfold>(STRING)

=over 4

See L<Mail::Message::Field/"Internals">

=back

=head2 Parsing

$obj-E<gt>B<consumeAddress>(STRING, OPTIONS)

=over 4

Try to destilate address information from the STRING.   Returned are
an address B<object> and the left-over string.  If no address was found,
the first returned value is C<undef>.

=back

$obj-E<gt>B<consumeComment>(STRING)

Mail::Message::Field::Addresses-E<gt>B<consumeComment>(STRING)

=over 4

See L<Mail::Message::Field::Full/"Parsing">

=back

$obj-E<gt>B<consumeDomain>(STRING)

=over 4

Try to get a valid domain representation from STRING.  Returned are the
domain string as found (or C<undef>) and the rest of the string.

=back

$obj-E<gt>B<consumeDotAtom>(STRING)

=over 4

See L<Mail::Message::Field::Full/"Parsing">

=back

$obj-E<gt>B<consumePhrase>(STRING)

Mail::Message::Field::Addresses-E<gt>B<consumePhrase>(STRING)

=over 4

See L<Mail::Message::Field::Full/"Parsing">

=back

$obj-E<gt>B<datum>([VALUE])

=over 4

See L<Mail::Message::Field::Structured/"Parsing">

=back

$obj-E<gt>B<parse>(STRING)

=over 4

See L<Mail::Message::Field::Full/"Parsing">

=back

$obj-E<gt>B<produceBody>

=over 4

See L<Mail::Message::Field::Full/"Parsing">

=back

=head2 Error handling

$obj-E<gt>B<AUTOLOAD>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<addReport>(OBJECT)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

Mail::Message::Field::Addresses-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Message::Field::Addresses-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Message::Field::Addresses-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

$obj-E<gt>B<DESTROY>

=over 4

See L<Mail::Reporter/"Cleanup">

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back

=head1 DETAILS

=head1 DIAGNOSTICS

Warning: Field content is not numerical: $content

=over 4

The numeric value of a field is requested (for instance the C<Lines> or
C<Content-Length> fields should be numerical), however the data contains
weird characters.

=back

Warning: Illegal character in charset '$charset'

=over 4

The field is created with an utf8 string which only contains data from the
specified character set.  However, that character set can never be a valid
name because it contains characters which are not permitted.

=back

Warning: Illegal character in field name $name

=over 4

A new field is being created which does contain characters not permitted
by the RFCs.  Using this field in messages may break other e-mail clients
or transfer agents, and therefore mutulate or extinguish your message.

=back

Warning: Illegal character in language '$lang'

=over 4

The field is created with data which is specified to be in a certain language,
however, the name of the language cannot be valid: it contains characters
which are not permitted by the RFCs.

=back

Warning: Illegal encoding '$encoding', used 'q'

=over 4

The RFCs only permit base64 (C<b > or C<B >) or quoted-printable
(C<q> or C<Q>) encoding.  Other than these four options are illegal.

=back

Error: No attributes for address fields.

=over 4

Is is not possible to add attributes to address fields: it is not permitted
by the RFCs.

=back

Error: Package $package does not implement $method.

=over 4

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.078,
built on November 09, 2007. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2007 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

