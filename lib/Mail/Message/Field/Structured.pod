
=head1 NAME

Mail::Message::Field::Structured - one line of a structured message header


=head1 INHERITANCE

 Mail::Message::Field::Structured
   is a Mail::Message::Field::Full
   is a Mail::Message::Field
   is a Mail::Reporter

 Mail::Message::Field::Structured is extended by
   Mail::Message::Field::Addresses
   Mail::Message::Field::URIs


=head1 SYNOPSIS

 my $f = Mail::Message::Field::Full
            ->new('Content-Type' => 'text/html');
 # $f is now a Mail::Message::Field::Structured
 # NOT READY YET!!!

 my @encode = (charset => 'jp', use_continuations => 1);
 $f->attribute('filename=passwd');
 $f->attribute(filename => 'passwd', @encode);

 my $attr = Mail::Message::Field::Attribute->new(...);
 $f->attribute($attr);


=head1 DESCRIPTION



=head1 OVERLOADED


overload: B<"">

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<+0>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<<=>>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<bool>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<cmp>

=over 4

See L<Mail::Message::Field/"OVERLOADED">

=back

overload: B<stringification>

=over 4

See L<Mail::Message::Field::Full/"OVERLOADED">

=back


=head1 METHODS


=head2 Constructors


$obj-E<gt>B<clone>

=over 4

See L<Mail::Message::Field/"Constructors">

=back

Mail::Message::Field::Structured-E<gt>B<from>(FIELD, OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Constructors">

=back

Mail::Message::Field::Structured-E<gt>B<new>(DATA)

=over 4

=over 4

=item * B<new> LINE

Pass a LINE as it could be found in a file: a (possibly folded) line
which is terminated by a new-line.

=item * B<new> NAME, BODY, OPTIONS

A set of values which shape the line.

=back

The NAME is a wellformed header name (you may use wellformedName()) to
be sure about the casing.  The BODY is a string, one object, or an
ref-array of objects.  In case of objects, they must fit to the
constructor of the field: the types which are accepted may differ.
The optional ATTRIBUTE list contains L<Mail::Message::Field::Attribute|Mail::Message::Field::Attribute>
objects.  Finally, there are some OPTIONS.

 Option      Defined in       Default      
 attributes                   C<[]>        
 charset     L<Mail::Message::Field::Full>  undef        
 encoding    L<Mail::Message::Field::Full>  C<'q'>       
 extra                        undef        
 force       L<Mail::Message::Field::Full>  false        
 language    L<Mail::Message::Field::Full>  undef        
 log         L<Mail::Reporter>  C<'WARNINGS'>
 trace       L<Mail::Reporter>  C<'WARNINGS'>

. attributes ATTRS

=over 4

There are various ways to specify these attributes: pass a reference
to an array which list of key-value pairs representing attributes,
or reference to a hash containing these pairs, or an array with
L<Mail::Message::Field::Attribute|Mail::Message::Field::Attribute> objects.

=back

. charset STRING

. encoding 'q'|'Q'|'b'|'B'

. extra STRING

=over 4

Text which is appended after the line (preceded by a semicolon).

=back

. force BOOLEAN

. language STRING

. log LEVEL

. trace LEVEL

I<Example:> of a structured field


 my @attrs   = (Mail::Message::Field::Attribute->new(...), ...);
 my @options = (extra => 'the color blue');
 my $t = Mail::Message::Field::Full->new(To => \@addrs, @attrs, @options);

=back

=head2 The field


$obj-E<gt>B<isStructured>

Mail::Message::Field::Structured-E<gt>B<isStructured>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<length>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<nrLines>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<print>([FILEHANDLE])

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<size>

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<string>([WRAP])

=over 4

See L<Mail::Message::Field/"The field">

=back

$obj-E<gt>B<toDisclose>

=over 4

See L<Mail::Message::Field/"The field">

=back

=head2 Access to the name


$obj-E<gt>B<Name>

=over 4

See L<Mail::Message::Field/"Access to the name">

=back

$obj-E<gt>B<name>

=over 4

See L<Mail::Message::Field/"Access to the name">

=back

$obj-E<gt>B<wellformedName>([STRING])

=over 4

See L<Mail::Message::Field/"Access to the name">

=back

=head2 Access to the body


$obj-E<gt>B<body>

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<decodedBody>(OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Access to the body">

=back

$obj-E<gt>B<folded>

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<foldedBody>([BODY])

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<stripCFWS>([STRING])

Mail::Message::Field::Structured-E<gt>B<stripCFWS>([STRING])

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

$obj-E<gt>B<unfoldedBody>([BODY, [WRAP]])

=over 4

See L<Mail::Message::Field/"Access to the body">

=back

=head2 Access to the content


$obj-E<gt>B<addresses>

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<attribute>(OBJECT|(STRING, OPTIONS)|(NAME,VALUE,OPTIONS))

=over 4

Add an attribute to the field.  The attributes are added left-to-right into
the string representation of the field, although the order of the attributes
is un-important, according to the RFCs.

You may pass a fully prepared L<Mail::Message::Field::Attribute|Mail::Message::Field::Attribute> OBJECT,
if you like to do all preparations for correct representation of the
data yourself.  You may also pass one STRING, which is a fully prepared
attribute.  This STRING will not be changed, so be careful about quoting
and encodings.

As third possibility, you can specify an attribute NAME and its VALUE.
An attribute object will be created for you implicitly in both
cases where such object is not supplied, passing the OPTIONS.  See
L<Mail::Message::Field::Attribute::new()|Mail::Message::Field::Attribute/"Constructors"> about the available OPTIONS.

The attribute object is returned, however, when continuations are used this
may be an object you already know about.  C<undef> is returned when
construction fails (when the attribute is incorrect).

I<Example:> 

 $f->attribute(filename => 'passwd');
 $f->attribute(filename => 'passwd', use_continuations => 0);

 my $attr = Mail::Message::Field::Attribute->new(...);
 $f->attribute($attr);

=back

$obj-E<gt>B<attributes>

=over 4

Returns a list with all attributes, which are all
L<Mail::Message::Field::Attribute|Mail::Message::Field::Attribute> objects.  The attributes are not
ordered in any way.  The list may be empty.  Double attributes or
continuations are folded into one.

=back

$obj-E<gt>B<beautify>

=over 4

See L<Mail::Message::Field::Full/"Access to the content">

=back

$obj-E<gt>B<comment>([STRING])

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<createComment>(STRING, OPTIONS)

Mail::Message::Field::Structured-E<gt>B<createComment>(STRING, OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Access to the content">

=back

$obj-E<gt>B<createPhrase>(STRING, OPTIONS)

Mail::Message::Field::Structured-E<gt>B<createPhrase>(STRING, OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Access to the content">

=back

$obj-E<gt>B<study>

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<toDate>([TIME])

Mail::Message::Field::Structured-E<gt>B<toDate>([TIME])

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

$obj-E<gt>B<toInt>

=over 4

See L<Mail::Message::Field/"Access to the content">

=back

=head2 Other methods


$obj-E<gt>B<dateToTimestamp>(STRING)

Mail::Message::Field::Structured-E<gt>B<dateToTimestamp>(STRING)

=over 4

See L<Mail::Message::Field/"Other methods">

=back

=head2 Internals


$obj-E<gt>B<consume>(LINE | (NAME,BODY|OBJECTS))

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<decode>(STRING, OPTIONS)

Mail::Message::Field::Structured-E<gt>B<decode>(STRING, OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Internals">

=back

$obj-E<gt>B<defaultWrapLength>([LENGTH])

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<encode>(STRING, OPTIONS)

=over 4

See L<Mail::Message::Field::Full/"Internals">

=back

$obj-E<gt>B<fold>(NAME, BODY, [MAXCHARS])

Mail::Message::Field::Structured-E<gt>B<fold>(NAME, BODY, [MAXCHARS])

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<setWrapLength>([LENGTH])

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<stringifyData>(STRING|ARRAY|OBJECTS)

=over 4

See L<Mail::Message::Field/"Internals">

=back

$obj-E<gt>B<unfold>(STRING)

=over 4

See L<Mail::Message::Field/"Internals">

=back

=head2 Parsing


$obj-E<gt>B<consumeComment>(STRING)

Mail::Message::Field::Structured-E<gt>B<consumeComment>(STRING)

=over 4

See L<Mail::Message::Field::Full/"Parsing">

=back

$obj-E<gt>B<consumeDotAtom>(STRING)

=over 4

See L<Mail::Message::Field::Full/"Parsing">

=back

$obj-E<gt>B<consumePhrase>(STRING)

Mail::Message::Field::Structured-E<gt>B<consumePhrase>(STRING)

=over 4

See L<Mail::Message::Field::Full/"Parsing">

=back

$obj-E<gt>B<parse>(STRING)

=over 4

See L<Mail::Message::Field::Full/"Parsing">

=back

=head2 Error handling


$obj-E<gt>B<AUTOLOAD>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<addReport>(OBJECT)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

Mail::Message::Field::Structured-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Message::Field::Structured-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Message::Field::Structured-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup


$obj-E<gt>B<DESTROY>

=over 4

See L<Mail::Reporter/"Cleanup">

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back



=head1 DIAGNOSTICS

I<Warning:> Field content is not numerical: $content

The numeric value of a field is requested (for instance the C<Lines> or
C<Content-Length> fields should be numerical), however the data contains
weird characters.

I<Warning:> Illegal character in charset '$charset'

The field is created with an utf8 string which only contains data from the
specified character set.  However, that character set can never be a valid
name because it contains characters which are not permitted.

I<Warning:> Illegal character in field name $name

A new field is being created which does contain characters not permitted
by the RFCs.  Using this field in messages may break other e-mail clients
or transfer agents, and therefore mutulate or extinguish your message.

I<Warning:> Illegal character in language '$lang'

The field is created with data which is specified to be in a certain language,
however, the name of the language cannot be valid: it contains characters
which are not permitted by the RFCs.

I<Warning:> Illegal encoding '$encoding', used 'q'

The RFCs only permit base64 (C<b > or C<B >) or quoted-printable
(C<q> or C<Q>) encoding.  Other than these four options are illegal.

I<Error:> Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.


=head1 DETAILS






=head1 REFERENCES

See the MailBox website at L<http://perl.overmeer.net/mailbox/> for more details.

=head1 COPYRIGHTS

Distribution version 2.051.
Written by Mark Overmeer (mark@overmeer.net).  See the ChangeLog for
other contributors.

Copyright (c) 2001-2003 by the author(s). All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


