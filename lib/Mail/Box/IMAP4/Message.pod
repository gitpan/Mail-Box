=head1 NAME

Mail::Box::IMAP4::Message - one message on a IMAP4 server

=head1 INHERITANCE

 Mail::Box::IMAP4::Message
   is a Mail::Box::Net::Message
   is a Mail::Box::Message
   is a Mail::Message
   is a Mail::Reporter

=head1 SYNOPSIS

 my $folder = new Mail::Box::IMAP4 ...
 my $message = $folder->message(10);

=head1 DESCRIPTION

A C<Mail::Box::IMAP4::Message> represents one message on a IMAP4 server,
maintained by a L<Mail::Box::IMAP4|Mail::Box::IMAP4> folder. Each message is stored as
separate entity on the server, and maybe temporarily in your program
as well.

=head1 METHODS

=head2 Constructors

$obj-E<gt>B<clone>(OPTIONS)

=over 4

See L<Mail::Message/"Constructors">

=back

Mail::Box::IMAP4::Message-E<gt>B<new>(OPTIONS)

=over 4

 Option      --Defined in     --Default
 body          Mail::Message    undef
 body_type     Mail::Box::Message  Mail::Message::Body::Lines
 cache_body                     <false>
 cache_head                     <false>
 cache_labels                   <false>
 deleted       Mail::Message    <false>
 field_type    Mail::Message    undef
 folder        Mail::Box::Message  <required>
 head          Mail::Message    undef
 head_type     Mail::Message    Mail::Message::Head::Complete
 labels        Mail::Message    {}
 log           Mail::Reporter   'WARNINGS'
 messageId     Mail::Message    undef
 modified      Mail::Message    <false>
 size          Mail::Box::Message  undef
 trace         Mail::Reporter   'WARNINGS'
 trusted       Mail::Message    <false>
 unique        Mail::Box::Net::Message  <unique string>
 write_labels                   <true>

. body => OBJECT

. body_type => CODE|CLASS

. cache_body => BOOLEAN

. cache_head => BOOLEAN

. cache_labels => BOOLEAN

=over 4

All standard IMAP labels can be cached on the local server to improve
speed.  This has the same dangers as setting C<write_labels> to false.
The caching starts when the first label of the message was read.

=back

. deleted => BOOLEAN

. field_type => CLASS

. folder => FOLDER

. head => OBJECT

. head_type => CLASS

. labels => ARRAY|HASH

. log => LEVEL

. messageId => STRING

. modified => BOOLEAN

. size => INTEGER

. trace => LEVEL

. trusted => BOOLEAN

. unique => STRING

. write_labels => BOOLEAN

=over 4

When a label is changed or its value read, using L<label()|Mail::Box::IMAP4::Message/"METHODS">, that info
should be sent to the IMAP server.  But, this action could be superfluous,
for instance because the label was already set or clear, and communication
is expensive.  On the other hand, someone else may use IMAP to make
changes in the same folder, and will get the updates too late or never...

=back

=back

=head2 Constructing a message

$obj-E<gt>B<bounce>([RG-OBJECT|OPTIONS])

=over 4

See L<Mail::Message::Construct::Bounce/"Constructing a message">

=back

Mail::Box::IMAP4::Message-E<gt>B<build>([MESSAGE|PART|BODY], CONTENT)

=over 4

See L<Mail::Message::Construct::Build/"Constructing a message">

=back

Mail::Box::IMAP4::Message-E<gt>B<buildFromBody>(BODY, [HEAD], HEADERS)

=over 4

See L<Mail::Message::Construct::Build/"Constructing a message">

=back

$obj-E<gt>B<forward>(OPTIONS)

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

$obj-E<gt>B<forwardAttach>(OPTIONS)

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

$obj-E<gt>B<forwardEncapsulate>(OPTIONS)

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

$obj-E<gt>B<forwardInline>(OPTIONS)

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

$obj-E<gt>B<forwardNo>(OPTIONS)

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

$obj-E<gt>B<forwardPostlude>

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

$obj-E<gt>B<forwardPrelude>

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

$obj-E<gt>B<forwardSubject>(STRING)

=over 4

See L<Mail::Message::Construct::Forward/"Constructing a message">

=back

Mail::Box::IMAP4::Message-E<gt>B<read>(FILEHANDLE|SCALAR|REF-SCALAR|ARRAY-OF-LINES, OPTIONS)

=over 4

See L<Mail::Message::Construct::Read/"Constructing a message">

=back

$obj-E<gt>B<rebuild>(OPTIONS)

=over 4

See L<Mail::Message::Construct::Rebuild/"Constructing a message">

=back

$obj-E<gt>B<reply>(OPTIONS)

=over 4

See L<Mail::Message::Construct::Reply/"Constructing a message">

=back

$obj-E<gt>B<replyPrelude>([STRING|FIELD|ADDRESS|ARRAY-OF-THINGS])

=over 4

See L<Mail::Message::Construct::Reply/"Constructing a message">

=back

$obj-E<gt>B<replySubject>(STRING)

Mail::Box::IMAP4::Message-E<gt>B<replySubject>(STRING)

=over 4

See L<Mail::Message::Construct::Reply/"Constructing a message">

=back

=head2 The message

$obj-E<gt>B<container>

=over 4

See L<Mail::Message/"The message">

=back

$obj-E<gt>B<copyTo>(FOLDER, OPTIONS)

=over 4

See L<Mail::Box::Message/"The message">

=back

$obj-E<gt>B<folder>([FOLDER])

=over 4

See L<Mail::Box::Message/"The message">

=back

$obj-E<gt>B<isDummy>

=over 4

See L<Mail::Message/"The message">

=back

$obj-E<gt>B<isPart>

=over 4

See L<Mail::Message/"The message">

=back

$obj-E<gt>B<messageId>

=over 4

See L<Mail::Message/"The message">

=back

$obj-E<gt>B<moveTo>(FOLDER, OPTIONS)

=over 4

See L<Mail::Box::Message/"The message">

=back

$obj-E<gt>B<print>([FILEHANDLE])

=over 4

See L<Mail::Message/"The message">

=back

$obj-E<gt>B<send>([MAILER], OPTIONS)

=over 4

See L<Mail::Message/"The message">

=back

$obj-E<gt>B<seqnr>([INTEGER])

=over 4

See L<Mail::Box::Message/"The message">

=back

$obj-E<gt>B<size>

=over 4

Returns the size of this message.  If the message is still on the remote
server, IMAP is used to ask for the size.  When the message is already loaded
onto the local system, the size of the parsed message is taken.  These
sizes can differ because the difference in line-ending representation.

=back

$obj-E<gt>B<toplevel>

=over 4

See L<Mail::Message/"The message">

=back

$obj-E<gt>B<unique>([STRING|undef])

=over 4

See L<Mail::Box::Net::Message/"The message">

=back

$obj-E<gt>B<write>([FILEHANDLE])

=over 4

See L<Mail::Message/"The message">

=back

=head2 The header

$obj-E<gt>B<bcc>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<cc>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<date>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<destinations>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<from>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<get>(FIELDNAME)

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<guessTimestamp>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<head>([HEAD])

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<nrLines>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<sender>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<study>(FIELDNAME)

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<subject>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<timestamp>

=over 4

See L<Mail::Message/"The header">

=back

$obj-E<gt>B<to>

=over 4

See L<Mail::Message/"The header">

=back

=head2 The body

$obj-E<gt>B<body>([BODY])

=over 4

See L<Mail::Message/"The body">

=back

$obj-E<gt>B<contentType>

=over 4

See L<Mail::Message/"The body">

=back

$obj-E<gt>B<decoded>(OPTIONS)

=over 4

See L<Mail::Message/"The body">

=back

$obj-E<gt>B<encode>(OPTIONS)

=over 4

See L<Mail::Message/"The body">

=back

$obj-E<gt>B<isMultipart>

=over 4

See L<Mail::Message/"The body">

=back

$obj-E<gt>B<isNested>

=over 4

See L<Mail::Message/"The body">

=back

$obj-E<gt>B<parts>(['ALL'|'ACTIVE'|'DELETED'|'RECURSE'|FILTER])

=over 4

See L<Mail::Message/"The body">

=back

=head2 Flags

$obj-E<gt>B<delete>

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<deleted>([BOOLEAN])

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<isDeleted>

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<isModified>

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<label>(LABEL|PAIRS)

=over 4

With only one argument, the value related to LABEL is returned.  With
more that one argument, the list is interpreted a label-value PAIRS
to be set.

The IMAP protocol defines its own names for the labels, which must
be set imediately to inform other IMAP clients which may have the
same folder open. But that can be changed with L<new(write_labels)|Mail::Box::IMAP4::Message/"METHODS">.
Some labels are translated to the corresponding IMAP system labels. 

=back

$obj-E<gt>B<labels>

=over 4

Get the names of all labels (LIST context, not efficient in IMAP4), or
a reference to a hash with labels.  You should only use the returned
hash to read the labels, because changes made to it will not be passed
to the remote server.  See L<labels()|Mail::Box::IMAP4::Message/"METHODS"> to set values.

=back

$obj-E<gt>B<labelsToStatus>

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<modified>([BOOLEAN])

=over 4

See L<Mail::Message/"Flags">

=back

$obj-E<gt>B<statusToLabels>

=over 4

See L<Mail::Message/"Flags">

=back

=head2 The whole message as text

$obj-E<gt>B<file>

=over 4

See L<Mail::Message::Construct::Text/"The whole message as text">

=back

$obj-E<gt>B<lines>

=over 4

See L<Mail::Message::Construct::Text/"The whole message as text">

=back

$obj-E<gt>B<printStructure>([FILEHANDLE|undef],[INDENT])

=over 4

See L<Mail::Message::Construct::Text/"The whole message as text">

=back

$obj-E<gt>B<string>

=over 4

See L<Mail::Message::Construct::Text/"The whole message as text">

=back

=head2 Internals

$obj-E<gt>B<clonedFrom>

=over 4

See L<Mail::Message/"Internals">

=back

Mail::Box::IMAP4::Message-E<gt>B<coerce>(MESSAGE, OPTIONS)

=over 4

See L<Mail::Message/"Internals">

=back

$obj-E<gt>B<diskDelete>

=over 4

See L<Mail::Box::Message/"Internals">

=back

$obj-E<gt>B<fetch>([INFO, ...])

=over 4

Use the IMAP's C<UID FETCH IMAP> command to get some data about this
message.  The INFO request is passed to L<Mail::Box::IMAP4::fetch()|Mail::Box::IMAP4/"Internals">.
Without INFO, C<ALL> information is retreived and returned as a HASH.

=back

$obj-E<gt>B<isDelayed>

=over 4

See L<Mail::Message/"Internals">

=back

$obj-E<gt>B<loadBody>

=over 4

See L<Mail::Box::Net::Message/"Internals">

=back

$obj-E<gt>B<readBody>(PARSER, HEAD [, BODYTYPE])

=over 4

See L<Mail::Box::Message/"Internals">

=back

$obj-E<gt>B<readFromParser>(PARSER, [BODYTYPE])

=over 4

See L<Mail::Message/"Internals">

=back

$obj-E<gt>B<readHead>(PARSER [,CLASS])

=over 4

See L<Mail::Message/"Internals">

=back

$obj-E<gt>B<recursiveRebuildPart>(PART, OPTIONS)

=over 4

See L<Mail::Message::Construct::Rebuild/"Internals">

=back

$obj-E<gt>B<storeBody>(BODY)

=over 4

See L<Mail::Message/"Internals">

=back

$obj-E<gt>B<takeMessageId>([STRING])

=over 4

See L<Mail::Message/"Internals">

=back

$obj-E<gt>B<writeDelayed>(IMAP)

=over 4

Write all delayed information, like label changes, to the server.  This
is done under force, so should even be done for folders opened without
write-access. This method is called indirectly by a L<Mail::Box::write()|Mail::Box/"Internals">
or L<Mail::Box::close()|Mail::Box/"The folder">.

The IMAP argument is a Mail::IMAPClient which has the right folder
already selected.

Writing changes to the remote folder is not without hassle: IMAP4
(or is it only L<Mail::IMAPClient> doesn't support replacing header
or body.  Therefore, when either of them change, the whole message is
rewritten to the server (which is supported), and the original flagged
for deletion.

=back

=head2 Error handling

$obj-E<gt>B<AUTOLOAD>

=over 4

See L<Mail::Message::Construct/"METHODS">

=back

$obj-E<gt>B<addReport>(OBJECT)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

Mail::Box::IMAP4::Message-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Box::IMAP4::Message-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Box::IMAP4::Message-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<shortSize>([VALUE])

Mail::Box::IMAP4::Message-E<gt>B<shortSize>([VALUE])

=over 4

See L<Mail::Message/"Error handling">

=back

$obj-E<gt>B<shortString>

=over 4

See L<Mail::Message/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

$obj-E<gt>B<DESTROY>

=over 4

See L<Mail::Message/"Cleanup">

=back

$obj-E<gt>B<destruct>

=over 4

See L<Mail::Box::Message/"Cleanup">

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back

=head1 DETAILS

=head2 Labels

=head3 IMAP protocol flags

Labels (or flags) are known to all folder formats, but differ how they
are stored.  Some folder types use message header lines to keep the
labels, other use a seperate file.  The IMAP protocol does not specify
how the labels are kept on the server, but does specify how they are named.

The label names as defined by the IMAP protocol are standardized into
the MailBox standard to hide folder differences.  The following translations
are always performed:

 \Seen     => seen
 \Answered => replied
 \Flagged  => flagged
 \Deleted  => deleted
 \Draft    => draft
 \Recent   => NOT old

example: of label translations

 $imap->message(3)->label(replied => 1, draft => 0);

will result in a IMAP protocol statements like

 A003 STORE 4 +FLAGS (\Answered)
 A003 STORE 4 -FLAGS (\Draft)

=head3 Other labels

Of course, your program may be in need for more labels than those provided
by the protocol.  You can still use these: they stay locally (and are
lost when the folder is closed).  Some IMAP4 extensions permit more labels
than the basic RFC, but that is not yet supported by this implementation.

=head3 Caching labels

When you ask for one or more flags of a message more than once, you may
improve the overall performance by setting L<new(cache_labels)|Mail::Box::IMAP4::Message/"METHODS"> to C<YES>.
However, this may cause inconsistencies when multiple clients use the
same folder on the IMAP server.

You may also delay the label updates to the server until the
folder is closed (or for ever when read-only is required).  When
L<Mail::Box::write()|Mail::Box/"Internals"> or L<Mail::Box::close()|Mail::Box/"The folder"> is called, it is decided
whether to throw all changes away or write after all.

=head1 DIAGNOSTICS

Error: Cannot coerce a $class object into a $class object

=over 4

=back

Error: Cannot include forward source as $include.

=over 4

Unknown alternative for the L<forward(include)|Mail::Message::Construct::Forward/"Constructing a message">.  Valid choices are
C<NO>, C<INLINE>, C<ATTACH>, and C<ENCAPSULATE>.

=back

Error: Cannot include reply source as $include.

=over 4

Unknown alternative for the C<include> option of L<reply()|Mail::Message::Construct::Reply/"Constructing a message">.  Valid
choices are C<NO>, C<INLINE>, and C<ATTACH>.

=back

Error: Method bounce requires To, Cc, or Bcc

=over 4

The message L<bounce()|Mail::Message::Construct::Bounce/"Constructing a message"> method forwards a received message off to someone
else without modification; you must specified it's new destination.
If you have the urge not to specify any destination, you probably
are looking for L<reply()|Mail::Message::Construct::Reply/"Constructing a message">. When you wish to modify the content, use
L<forward()|Mail::Message::Construct::Forward/"Constructing a message">.

=back

Error: Method forwardAttach requires a preamble

=over 4

=back

Error: Method forwardEncapsulate requires a preamble

=over 4

=back

Error: No address to create forwarded to.

=over 4

If a forward message is created, a destination address must be specified.

=back

Error: No default mailer found to send message.

=over 4

The message L<send()|Mail::Message/"The message"> mechanism had not enough information to automatically
find a mail transfer agent to sent this message.  Specify a mailer
explicitly using the C<via> options.

=back

Error: No rebuild rule $name defined.

=over 4

=back

Error: Only build() Mail::Message's; they are not in a folder yet

=over 4

You may wish to construct a message to be stored in a some kind
of folder, but you need to do that in two steps.  First, create a
normal L<Mail::Message|Mail::Message>, and then add it to the folder.  During this
L<Mail::Box::addMessage()|Mail::Box/"The folder"> process, the message will get L<coerce()|Mail::Message/"Internals">-d
into the right message type, adding storage information and the like.

=back

Error: Package $package does not implement $method.

=over 4

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=back

Error: Unable to read delayed body.

=over 4

=back

Error: Unable to read delayed head.

=over 4

=back

Error: coercion starts with some object

=over 4

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.080,
built on January 15, 2008. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2008 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

