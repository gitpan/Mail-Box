=head1 NAME

Mail::Box::MH - handle MH folders

=head1 INHERITANCE

 Mail::Box::MH
   is a Mail::Box::Dir
   is a Mail::Box
   is a Mail::Reporter

=head1 SYNOPSIS

 use Mail::Box::MH;
 my $folder = new Mail::Box::MH folder => $ENV{MAIL}, ...;

=head1 DESCRIPTION

This documentation describes how MH mailboxes work, and what you
can do with the MH folder object C<Mail::Box::MH>.

=head1 OVERLOADED

overload: B<"">

=over 4

See L<Mail::Box/"OVERLOADED">

=back

overload: B<@{}>

=over 4

See L<Mail::Box/"OVERLOADED">

=back

overload: B<cmp>

=over 4

See L<Mail::Box/"OVERLOADED">

=back

=head1 METHODS

=head2 Constructors

Mail::Box::MH-E<gt>B<new>(OPTIONS)

=over 4

 Option           --Defined in     --Default
 access             Mail::Box        'r'
 body_delayed_type  Mail::Box        Mail::Message::Body::Delayed
 body_type          Mail::Box        Mail::Message::Body::Lines
 coerce_options     Mail::Box        []
 create             Mail::Box        <false>
 directory          Mail::Box::Dir   <derived from folder name>
 extract            Mail::Box        10240
 field_type         Mail::Box        undef
 fix_headers        Mail::Box        <false>
 folder             Mail::Box        $ENV{MAIL}
 folderdir          Mail::Box        $ENV{HOME}/.mh
 head_delayed_type  Mail::Box        Mail::Message::Head::Delayed
 head_type          Mail::Box        Mail::Message::Head::Complete
 index                               undef
 index_filename                      <foldername>/.index
 index_type                          Mail::Box::MH::Index
 keep_dups          Mail::Box        <false>
 keep_index                          0
 labels                              undef
 labels_filename                     <foldername>/.mh_sequence
 labels_type                         Mail::Box::MH::Labels
 lock_file          Mail::Box        <index_file>
 lock_timeout       Mail::Box        1 hour
 lock_type          Mail::Box        Mail::Box::Locker::DotLock
 lock_wait          Mail::Box        10 seconds
 locker             Mail::Box        undef
 log                Mail::Reporter   'WARNINGS'
 manager            Mail::Box        undef
 message_type       Mail::Box        Mail::Box::Message
 multipart_type     Mail::Box        Mail::Message::Body::Multipart
 remove_when_empty  Mail::Box        <true>
 save_on_exit       Mail::Box        <true>
 trace              Mail::Reporter   'WARNINGS'
 trusted            Mail::Box        <depends on folder location>

. access => MODE

. body_delayed_type => CLASS

. body_type => CLASS|CODE

. coerce_options => ARRAY

. create => BOOLEAN

. directory => DIRECTORY

. extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'

. field_type => CLASS

. fix_headers => BOOLEAN

. folder => FOLDERNAME

. folderdir => DIRECTORY

. head_delayed_type => CLASS

. head_type => CLASS

. index => OBJECT

=over 4

You may specify an OBJECT of a type which extends L<Mail::Box::MH::Index|Mail::Box::MH::Index>
(at least implements a C<get()> method), as alternative for an index file
reader as created by C<Mail::Box::MH>.

=back

. index_filename => FILENAME

=over 4

The FILENAME which is used in each directory to store the headers of all
mails. The filename shall not contain a directory path. (e.g. Do not use
C</usr/people/jan/.index>, nor C<subdir/.index>, but say C<.index>.)

=back

. index_type => CLASS

. keep_dups => BOOLEAN

. keep_index => BOOLEAN

=over 4

Keep an index file of the specified mailbox, one file per directory.
Using an index file will speed up things considerably, because it avoids
reading all the message files the moment that you open the folder.  When
you open a folder, you can use the index file to retrieve information such
as the subject of each message, instead of having to read possibly
thousands of messages.

=back

. labels => OBJECT

=over 4

You may specify an OBJECT of a type which extends L<Mail::Box::MH::Labels|Mail::Box::MH::Labels>
(at least implements the C<get()> method), as alternative for labels file
reader as created by C<Mail::Box::MH>.

=back

. labels_filename => FILENAME

=over 4

In MH-folders, messages can be labeled, for instance based on the
sender or whether it is read or not.  This status is kept in a
file which is usually called C<.mh_sequences>, but that name can
be overruled with this flag.

=back

. labels_type => CLASS

. lock_file => FILENAME

. lock_timeout => SECONDS

. lock_type => CLASS|STRING|ARRAY

. lock_wait => SECONDS

. locker => OBJECT

. log => LEVEL

. manager => MANAGER

. message_type => CLASS

. multipart_type => CLASS

. remove_when_empty => BOOLEAN

. save_on_exit => BOOLEAN

. trace => LEVEL

. trusted => BOOLEAN

=back

=head2 The folder

$obj-E<gt>B<addMessage>(MESSAGE, OPTIONS)

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<addMessages>(MESSAGE [, MESSAGE, ...])

=over 4

See L<Mail::Box/"The folder">

=back

Mail::Box::MH-E<gt>B<appendMessages>(OPTIONS)

=over 4

Append a message to a folder which is not open.

 Option  --Defined in     --Default
 folder    Mail::Box        <required>
 message   Mail::Box        undef
 messages  Mail::Box        undef
 share     Mail::Box        <false>

. folder => FOLDERNAME

. message => MESSAGE

. messages => ARRAY-OF-MESSAGES

. share => BOOLEAN

=back

$obj-E<gt>B<close>(OPTIONS)

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<copyTo>(FOLDER, OPTIONS)

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<delete>(OPTIONS)

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<directory>

=over 4

See L<Mail::Box::Dir/"The folder">

=back

$obj-E<gt>B<folderdir>([DIRECTORY])

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<name>

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<organization>

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<size>

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<type>

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<update>(OPTIONS)

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<url>

=over 4

See L<Mail::Box/"The folder">

=back

=head2 Folder flags

$obj-E<gt>B<access>

=over 4

See L<Mail::Box/"Folder flags">

=back

$obj-E<gt>B<isModified>

=over 4

See L<Mail::Box/"Folder flags">

=back

$obj-E<gt>B<modified>([BOOLEAN])

=over 4

See L<Mail::Box/"Folder flags">

=back

$obj-E<gt>B<writable>

=over 4

See L<Mail::Box/"Folder flags">

=back

=head2 The messages

$obj-E<gt>B<current>([NUMBER|MESSAGE|MESSAGE-ID])

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<find>(MESSAGE-ID)

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<findFirstLabeled>(LABEL, [BOOLEAN, [ARRAY-OF-MSGS]])

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<message>(INDEX [,MESSAGE])

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<messageId>(MESSAGE-ID [,MESSAGE])

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<messageIds>

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<messages>(['ALL',RANGE,'ACTIVE','DELETED',LABEL,!LABEL,FILTER])

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<nrMessages>(OPTIONS)

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<scanForMessages>(MESSAGE, MESSAGE-IDS, TIMESPAN, WINDOW)

=over 4

See L<Mail::Box/"The messages">

=back

=head2 Sub-folders

$obj-E<gt>B<listSubFolders>(OPTIONS)

Mail::Box::MH-E<gt>B<listSubFolders>(OPTIONS)

=over 4

See L<Mail::Box/"Sub-folders">

=back

$obj-E<gt>B<nameOfSubFolder>(SUBNAME, [PARENTNAME])

Mail::Box::MH-E<gt>B<nameOfSubFolder>(SUBNAME, [PARENTNAME])

=over 4

See L<Mail::Box/"Sub-folders">

=back

$obj-E<gt>B<openRelatedFolder>(OPTIONS)

=over 4

See L<Mail::Box/"Sub-folders">

=back

$obj-E<gt>B<openSubFolder>(SUBNAME, OPTIONS)

=over 4

See L<Mail::Box/"Sub-folders">

=back

$obj-E<gt>B<topFolderWithMessages>

Mail::Box::MH-E<gt>B<topFolderWithMessages>

=over 4

See L<Mail::Box/"Sub-folders">

=back

=head2 Internals

$obj-E<gt>B<coerce>(MESSAGE, OPTIONS)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<create>(FOLDERNAME, OPTIONS)

Mail::Box::MH-E<gt>B<create>(FOLDERNAME, OPTIONS)

=over 4

 Option   --Defined in--Default
 folderdir  Mail::Box   undef

. folderdir => DIRECTORY

=back

$obj-E<gt>B<determineBodyType>(MESSAGE, HEAD)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<folderToDirectory>(FOLDERNAME, FOLDERDIR)

=over 4

See L<Mail::Box::Dir/"Internals">

=back

Mail::Box::MH-E<gt>B<foundIn>([FOLDERNAME], OPTIONS)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<highestMessageNumber>

=over 4

Returns the highest number which is used in the folder to store a file.
This method may be called when the folder is read (then this number can
be derived without file-system access), but also when the folder is not
read (yet).

=back

$obj-E<gt>B<index>

=over 4

Create a index reader/writer object.

=back

$obj-E<gt>B<labels>

=over 4

Create a label reader/writer object.

=back

$obj-E<gt>B<lineSeparator>([STRING|'CR'|'LF'|'CRLF'])

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<locker>

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<read>(OPTIONS)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<readMessageFilenames>(DIRECTORY)

=over 4

See L<Mail::Box::Dir/"Internals">

=back

$obj-E<gt>B<readMessages>(OPTIONS)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<storeMessage>(MESSAGE)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<toBeThreaded>(MESSAGES)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<toBeUnthreaded>(MESSAGES)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<updateMessages>(OPTIONS)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<write>(OPTIONS)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<writeMessages>(OPTIONS)

=over 4

 Option  --Defined in     --Default
 messages  Mail::Box        <required>
 renumber                   <true>

. messages => ARRAY

. renumber => BOOLEAN

=over 4

Permit renumbering of message.  By default this is true, but for some
unknown reason, you may be thinking that messages should not be renumbered.

=back

=back

=head2 Other methods

$obj-E<gt>B<timespan2seconds>(TIME)

Mail::Box::MH-E<gt>B<timespan2seconds>(TIME)

=over 4

See L<Mail::Box/"Other methods">

=back

=head2 Error handling

$obj-E<gt>B<AUTOLOAD>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<addReport>(OBJECT)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

Mail::Box::MH-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Box::MH-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Box::MH-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

$obj-E<gt>B<DESTROY>

=over 4

See L<Mail::Box/"Cleanup">

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back

=head1 DETAILS

=head2 How MH folders work

MH-type folders use a directory to store the messages of one folder.  Each
message is stored in a separate file.  This seems useful, because changes
in a folder change only a few of these small files, in contrast with
file-based folders where changes in a folder cause rewrites of huge
folder files.

However, MH-based folders perform very bad if you need header information
of all messages.  For instance, if you want to have full knowledge about
all message-threads (see L<Mail::Box::Thread::Manager|Mail::Box::Thread::Manager>) in the folder, it
requires to read all header lines in all message files.  And usually, reading
your messages in threads is desired.

So, each message is written in a separate file.  The filenames are
numbers, which count from C<1>.  Next to these message files, a
directory may contain a file named C<.mh_sequences>, storing labels which
relate to the messages.  Furthermore, a folder-directory may contain
sub-directories, which are seen as sub-folders.

=head2 This implementation

This implementation supports the C<.mh-sequences> file and sub-folders.
Next to this, considerable effort it made to avoid reading each message-file.
This should boost performance of the MailBox distribution over other
Perl-modules which are able to read folders.

Folder types which store their messages each in one file, together in
one directory, are bad for performance.  Consider that you want to know
the subjects of all messages, while browser through a folder with your
mail-reading client.  This would cause all message-files to be read.

L<Mail::Box::MH|Mail::Box::MH> has two ways to try improve performance.  You can use
an index-file, and use on delay-loading.  The combination performs even
better.  Both are explained in the next sections.

=head2 An index-file

If you specify L<new(keep_index)|Mail::Box::MH/"METHODS">, then all header-lines of all messages
from the folder which have been read once, will also be written into
one dedicated index-file (one file per folder).  The default filename
is C<.index>

However, index-files are not supported by any other reader which supports
MH (as far as I know).  If you read the folders with such I client, it
will not cause unrecoverable conflicts with this index-file, but at most
be bad for performance.

If you do not (want to) use an index-file, then delay-loading may
save your day.

=head1 DIAGNOSTICS

Error: Cannot append message without lock on $folder.

=over 4

It is impossible to append one or more messages to the folder which is
not opened, because locking it failes.  The folder may be in use by
an other application, or you may need to specify some lock related
options (see L<new()|Mail::Box::MH/"METHODS">).

=back

Error: Cannot create MH folder $name: $!

=over 4

For some reason, it is impossible to create the folder.  Check the permissions
and the name of the folder.  Does the path to the directory to be created
exist?

=back

Error: Cannot write folder $name without lock.

=over 4

It is impossible to get a lock on the folder, which means that the changes
can not be made.  You may need to tune the lock related options which
are available at folder creation.

=back

Warning: Changes not written to read-only folder $self.

=over 4

You have opened the folder read-only --which is the default set
by L<new(access)|Mail::Box/"Constructors">--, made modifications, and now want to close it.
Set L<close(force)|Mail::Box/"The folder"> if you want to overrule the access mode, or close
the folder with L<close(write)|Mail::Box/"The folder"> set to C<NEVER>.

=back

Error: Copying failed for one message.

=over 4

For some reason, for instance disc full, removed by external process, or
read-protection, it is impossible to copy one of the messages.  Copying will
proceed for the other messages.

=back

Error: Destination folder $name is not writable.

=over 4

The folder where the messages are copied to is not opened with write
access (see L<new(access)|Mail::Box/"Constructors">).  This has no relation with write permission
to the folder which is controled by your operating system.

=back

Warning: Different messages with id $msgid

=over 4

The message id is discovered more than once within the same folder, but the
content of the message seems to be different.  This should not be possible:
each message must be unique.

=back

Error: Folder $name is opened read-only

=over 4

You can not write to this folder unless you have opened the folder to
write or append with L<new(access)|Mail::Box/"Constructors">, or the C<force> option is set true.

=back

Error: Folder $name not deleted: not writable.

=over 4

The folder must be opened with write access via L<new(access)|Mail::Box/"Constructors">, otherwise
removing it will be refused.  So, you may have write-access according to
the operating system, but that will not automatically mean that this
C<delete> method permits you to.  The reverse remark is valid as well.

=back

Error: Invalid timespan '$timespan' specified.

=over 4

The string does not follow the strict rules of the time span syntax which
is permitted as parameter.

=back

Warning: Message-id '$msgid' does not contain a domain.

=over 4

According to the RFCs, message-ids need to contain a unique random part,
then an C<@>, and then a domain name.  This is made to avoid the creation
of two messages with the same id.  The warning emerges when the C<@> is
missing from the string.

=back

Error: Package $package does not implement $method.

=over 4

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=back

Error: Unable to create subfolder $name of $folder.

=over 4

The copy includes the subfolders, but for some reason it was not possible
to copy one of these.  Copying will proceed for all other sub-folders.

=back

Error: Unable to write message for $folder to $filename: $!

=over 4

The new message could not be written to its new file, for the specific
reason.

=back

Error: Writing folder $name failed

=over 4

For some reason (you probably got more error messages about this problem)
it is impossible to write the folder, although you should because there
were changes made.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.079,
built on November 28, 2007. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2007 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

