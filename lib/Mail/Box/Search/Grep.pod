
=head1 NAME

Mail::Box::Search::Grep - select messages within a mail box like grep does


=head1 INHERITANCE

 Mail::Box::Search::Grep
   is a Mail::Box::Search
   is a Mail::Reporter


=head1 SYNOPSIS

 use Mail::Box::Manager;
 my $mgr    = Mail::Box::Manager->new;
 my $folder = $mgr->open('Inbox');

 my $filter = Mail::Box::Search::Grep->new
    ( label => 'selected'
    , in => 'BODY', match => qr/abc?d*e/
    );

 my @msgs   = $filter->search($folder);

 my $filter = Mail::Box::Search::Grep->new
   ( field => 'To'
   , match => $my_email
   );

 if($filter->search($message)) {...}


=head1 DESCRIPTION

Try to find some text strings in the header and footer of messages.  Various
ways to limit the search to certain header fields, the whole header, only
the body, the whole message, but even binary multiparts, are provided for.

The name I<grep> is derived from the UNIX tool I<grep>, which means: "Get
Regular Expression and Print".  Although you can search using regular
expressions (the Perl way of them), you do not have to print those as
result.



=head1 METHODS


=head2 Constructors


Mail::Box::Search::Grep-E<gt>B<new>(OPTIONS)

=over 4

Create a UNIX-grep like search filter.

 Option      Defined in       Default                         
 binaries    L<Mail::Box::Search>  <false>                         
 decode      L<Mail::Box::Search>  <true>                          
 delayed     L<Mail::Box::Search>  <true>                          
 deleted     L<Mail::Box::Search>  <false>                         
 deliver                      undef                           
 field                        undef                           
 in          L<Mail::Box::Search>  <$field ? C<'HEAD'> : C<'BODY'>>
 label       L<Mail::Box::Search>  undef                           
 limit       L<Mail::Box::Search>  C<0>                            
 log         L<Mail::Reporter>  C<'WARNINGS'>                   
 logical     L<Mail::Box::Search>  C<'REPLACE'>                    
 match                        <required>                      
 multiparts  L<Mail::Box::Search>  <true>                          
 trace       L<Mail::Reporter>  C<'WARNINGS'>                   

. binaries BOOLEAN

. decode BOOLEAN

. delayed BOOLEAN

. deleted BOOLEAN

. deliver undef|CODE|'DELETE'|LABEL|'PRINT'|REF-ARRAY

=over 4

Store the details about where the match was found.  The search may take
much longer when this feature is enabled.

When an ARRAY is specified it will contain a list of references to hashes.
Each hash contains the information of one match.  A match in a header
line will result in a line with fields C<message>, C<part>, and C<field>, where
the field is a L<Mail::Message::Field|Mail::Message::Field> object.  When the match is in
the body the hash will contain a C<message>, C<part>, C<linenr>, and C<line>.

In case of a CODE reference, that routine is called for each match. The
first argument is this search object and the second a reference to same
hash as would be stored in the array.

The C<PRINT> will call L<printMatchedHead()|Mail::Box::Search::Grep/"The Results"> or L<printMatchedBody()|Mail::Box::Search::Grep/"The Results"> when
any matching header resp body line was found.  The output is minimized
by not reprinting the message info on multiple matches in the same
message.

C<DELETE> will flag
the message to be deleted in case of a match.  When a multipart's part
is matched, the whole message will be flagged for deletion.

=back

. field undef|STRING|REGEX|CODE

=over 4

Not valid in combination with C<in> set to C<BODY>.
The STRING is one full field name (case-insensitive).  Use a REGEX
to select more than one header line to be scanned. CODE is a routine which
is called for each field in the header.   The CODE is called with the header
as first, and the field as second argument.  If the CODE returns true, the
message is selected.

=back

. in 'HEAD'|'BODY'|'MESSAGE'

. label STRING

. limit NUMBER

. log LEVEL

. logical 'REPLACE'|'AND'|'OR'|'NOT'|'AND NOT'|'OR NOT'

. match STRING|REGEX|CODE

=over 4

The pattern to be search for can be a REGular EXpression, or a STRING.  In
both cases, the match succeeds if it is found anywhere within the selected
fields.

With a CODE reference, that function will be called each field or body-line.
When the result is true, the details are delivered.  The call formats are

 $code->($head, $field);          # for HEAD searches
 $code->($body, $linenr, $line);  # for BODY searches

The C<$head> resp C<$body> are one message's head resp. body object.  The
C<$field> is a header line which matches.  The C<$line> and C<$linenr>
tell the matching line in the body.

Be warned that when you search in C<MESSAGE> the code must accept
both formats.

=back

. multiparts BOOLEAN

. trace LEVEL

=back

=head2 Searching


$obj-E<gt>B<inBody>(PART, BODY)

=over 4

See L<Mail::Box::Search/"Searching">

=back

$obj-E<gt>B<inHead>(PART, HEAD)

=over 4

See L<Mail::Box::Search/"Searching">

=back

$obj-E<gt>B<search>(FOLDER|THREAD|MESSAGE|ARRAY-OF-MESSAGES)

=over 4

See L<Mail::Box::Search/"Searching">

=back

$obj-E<gt>B<searchPart>(PART)

=over 4

See L<Mail::Box::Search/"Searching">

=back

=head2 The Results


$obj-E<gt>B<printMatch>([FILEHANDLE], HASH)

=over 4

See L<Mail::Box::Search/"The Results">

=back

$obj-E<gt>B<printMatchedBody>(FILEHANDLE, MATCH)

=over 4

=back

$obj-E<gt>B<printMatchedHead>(FILEHANDLE, MATCH)

=over 4

=back

=head2 Error handling


$obj-E<gt>B<AUTOLOAD>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

Mail::Box::Search::Grep-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Box::Search::Grep-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Box::Search::Grep-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup


$obj-E<gt>B<DESTROY>

=over 4

See L<Mail::Reporter/"Cleanup">

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back



=head1 DIAGNOSTICS

I<Error:> Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.






=head1 REFERENCES

See the MailBox website at L<http://perl.overmeer.net/mailbox/> for more details.

=head1 COPYRIGHTS

Distribution version 2.047.
Written by Mark Overmeer (mark@overmeer.net).  See the ChangeLog for
other contributors.

Copyright (c) 2001-2003 by the author(s). All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


