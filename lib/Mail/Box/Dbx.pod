
=head1 NAME

Mail::Box::Dbx - read Outlook Express folders


=head1 INHERITANCE

 Mail::Box::Dbx
   is a Mail::Box::File
   is a Mail::Box
   is a Mail::Reporter


=head1 SYNOPSIS

 use Mail::Box::Dbx;
 my $folder = Mail::Box::Dbx->new(...);


=head1 DESCRIPTION

This documentation describes how to read from Outlook Express (dbx)
folders.  Even on Unix/Linux, you can access these folders to
read the data, or copy it to a different format.  Modifying of
xbd files is not supported.

These dbx folders are accessed using Mail::Transport::Dbx which
is distributed via CPAN as separate package.  This C<MAil::Transport::Dbx>
module is based on the open source library named C<libdbx>, which can
be found at L<http://sourceforge.net/project/ol2mbox/>.  The library does
not support writing of dbx files, and therefore limits the possibilities
of this package.


=head1 OVERLOADED


overload: B<"">

=over 4

See L<Mail::Box/"OVERLOADED">

=back

overload: B<@{}>

=over 4

See L<Mail::Box/"OVERLOADED">

=back

overload: B<cmp>

=over 4

See L<Mail::Box/"OVERLOADED">

=back


=head1 METHODS


=head2 Constructors


$obj-E<gt>B<create>(FOLDERNAME, OPTIONS)

Mail::Box::Dbx-E<gt>B<create>(FOLDERNAME, OPTIONS)

=over 4

Creation is not supported for dbx folders.

 Option     Defined in    Default
 folderdir  L<Mail::Box>  undef  

. folderdir DIRECTORY

=back

Mail::Box::Dbx-E<gt>B<new>(OPTIONS)

=over 4

 Option             Defined in       Default                                                         
 access             L<Mail::Box>     always C<'r'>                                                   
 body_delayed_type  L<Mail::Box>     L<Mail::Message::Body::Delayed|Mail::Message::Body::Delayed>    
 body_type          L<Mail::Box::File>  <see description>                                               
 coerce_options     L<Mail::Box>     C<[]>                                                           
 create             L<Mail::Box>     C<not implemented>                                              
 extract            L<Mail::Box>     C<10240>                                                        
 field_type         L<Mail::Box>     undef                                                           
 fix_headers        L<Mail::Box>     <false>                                                         
 folder             L<Mail::Box>     C<=Folders.dbx>                                                 
 folderdir          L<Mail::Box>     C<.>                                                            
 head_delayed_type  L<Mail::Box>     L<Mail::Message::Head::Delayed|Mail::Message::Head::Delayed>    
 head_type          L<Mail::Box>     L<Mail::Message::Head::Complete|Mail::Message::Head::Complete>  
 keep_dups          L<Mail::Box>     <false>                                                         
 lock_extension     L<Mail::Box::File>  C<'.lock'>                                                      
 lock_file          L<Mail::Box>     <foldername>.<lock-extension>                                   
 lock_timeout       L<Mail::Box>     1 hour                                                          
 lock_type          L<Mail::Box>     C<'NONE'>                                                       
 lock_wait          L<Mail::Box>     10 seconds                                                      
 locker             L<Mail::Box>     undef                                                           
 log                L<Mail::Reporter>  C<'WARNINGS'>                                                   
 manager            L<Mail::Box>     undef                                                           
 message_type       L<Mail::Box>     L<Mail::Box::Dbx::Message|Mail::Box::Dbx::Message>              
 multipart_type     L<Mail::Box>     L<Mail::Message::Body::Multipart|Mail::Message::Body::Multipart>
 remove_when_empty  L<Mail::Box>     C<not implemented>                                              
 save_on_exit       L<Mail::Box>     C<not implemented>                                              
 trace              L<Mail::Reporter>  C<'WARNINGS'>                                                   
 trusted            L<Mail::Box>     <depends on folder location>                                    
 write_policy       L<Mail::Box::File>  C<not implemented>                                              

. access MODE

. body_delayed_type CLASS

. body_type CLASS|CODE

. coerce_options ARRAY

. create BOOLEAN

. extract INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'

. field_type CLASS

. fix_headers BOOLEAN

. folder FOLDERNAME

. folderdir DIRECTORY

. head_delayed_type CLASS

. head_type CLASS

. keep_dups BOOLEAN

. lock_extension FILENAME|STRING

. lock_file FILENAME

. lock_timeout SECONDS

. lock_type CLASS|STRING

. lock_wait SECONDS

. locker OBJECT

. log LEVEL

. manager MANAGER

. message_type CLASS

. multipart_type CLASS

. remove_when_empty BOOLEAN

. save_on_exit BOOLEAN

. trace LEVEL

. trusted BOOLEAN

. write_policy 'REPLACE'|'INPLACE'|undef

=back

=head2 The folder


$obj-E<gt>B<addMessage>(MESSAGE)

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<addMessages>(MESSAGE [, MESSAGE, ...])

=over 4

See L<Mail::Box/"The folder">

=back

Mail::Box::Dbx-E<gt>B<appendMessages>(OPTIONS)

=over 4

See L<Mail::Box::File/"METHODS">

=back

$obj-E<gt>B<close>(OPTIONS)

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<copyTo>(FOLDER, OPTIONS)

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<delete>

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<filename>

=over 4

See L<Mail::Box::File/"The folder">

=back

$obj-E<gt>B<folderdir>([DIRECTORY])

=over 4

See L<Mail::Box/"The folder">

=back

Mail::Box::Dbx-E<gt>B<foundIn>([FOLDERNAME], [OPTIONS])

=over 4

If no FOLDERNAME is specified, then the value of the C<folder> option
is taken.  A dbx folder is a file which name ends on C<.dbx> (case
insensitive).

 Option     Defined in       Default
 folder                      undef  
 folderdir  L<Mail::Box>     undef  

. folder FOLDERNAME

. folderdir DIRECTORY

=back

$obj-E<gt>B<name>

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<organization>

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<size>

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<type>

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<update>(OPTIONS)

=over 4

See L<Mail::Box/"The folder">

=back

$obj-E<gt>B<url>

=over 4

See L<Mail::Box/"The folder">

=back

=head2 Folder flags


$obj-E<gt>B<isModified>

=over 4

See L<Mail::Box/"Folder flags">

=back

$obj-E<gt>B<modified>([BOOLEAN])

=over 4

See L<Mail::Box/"Folder flags">

=back

$obj-E<gt>B<writable>

=over 4

See L<Mail::Box/"Folder flags">

=back

=head2 The messages


$obj-E<gt>B<current>([NUMBER|MESSAGE|MESSAGE-ID])

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<find>(MESSAGE-ID)

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<findFirstLabeled>(LABEL, [BOOLEAN, [ARRAY-OF-MSGS]])

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<message>(INDEX [,MESSAGE])

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<messageId>(MESSAGE-ID [,MESSAGE])

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<messageIds>

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<messages>(['ALL',RANGE,'ACTIVE','DELETED',LABEL,!LABEL,FILTER])

=over 4

See L<Mail::Box/"The messages">

=back

$obj-E<gt>B<scanForMessages>(MESSAGE, MESSAGE-IDS, TIMESPAN, WINDOW)

=over 4

See L<Mail::Box/"The messages">

=back

=head2 Sub-folders


$obj-E<gt>B<listSubFolders>(OPTIONS)

Mail::Box::Dbx-E<gt>B<listSubFolders>(OPTIONS)

=over 4

It is adviced to set the C<check> flag, because dbx folder often list
large amounts of folder names which do not really exist.  However, checking
does consume some time.

 Option      Defined in       Default      
 check       L<Mail::Box>     <false>      
 folder      L<Mail::Box>     <required>   
 folderdir   L<Mail::Box>     <from folder>
 skip_empty  L<Mail::Box>     <false>      

. check BOOLEAN

. folder FOLDERNAME

. folderdir DIRECTORY

. skip_empty BOOL

=back

$obj-E<gt>B<nameOfSubFolder>(NAME)

=over 4

See L<Mail::Box/"Sub-folders">

=back

$obj-E<gt>B<openRelatedFolder>(OPTIONS)

=over 4

See L<Mail::Box/"Sub-folders">

=back

$obj-E<gt>B<openSubFolder>(NAME, OPTIONS)

=over 4

See L<Mail::Box/"Sub-folders">

=back

=head2 Internals


$obj-E<gt>B<coerce>(MESSAGE)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<determineBodyType>(MESSAGE, HEAD)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<folderToFilename>(FOLDERNAME, FOLDERDIR)

Mail::Box::Dbx-E<gt>B<folderToFilename>(FOLDERNAME, FOLDERDIR)

=over 4

Translate a folder name into a filename, using the
FOLDERDIR value to replace a leading C<=>.

=back

$obj-E<gt>B<lineSeparator>([STRING|'CR'|'LF'|'CRLF'])

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<locker>

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<messageCreateOptions>([TYPE, CONFIG])

=over 4

See L<Mail::Box::File/"Internals">

=back

$obj-E<gt>B<moveAwaySubFolder>(DIRECTORY, EXTENSION)

=over 4

See L<Mail::Box::File/"Internals">

=back

$obj-E<gt>B<parser>

=over 4

The parsing of messages is a combined job for the Mail::Transport::Dbx
module (to get the right data) and L<read()|Mail::Box/"Internals">.  Asking for the parser
will provide the transporter object.  If asked more than once, each time
the same object will be returned.

=back

$obj-E<gt>B<read>(OPTIONS)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<readMessages>(OPTIONS)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<storeMessage>(MESSAGE)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<toBeThreaded>(MESSAGES)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<toBeUnthreaded>(MESSAGES)

=over 4

See L<Mail::Box/"Internals">

=back

$obj-E<gt>B<updateMessages>(OPTIONS)

=over 4

See L<Mail::Box::File/"Internals">

=back

$obj-E<gt>B<write>(OPTIONS)

=over 4

See L<Mail::Box::File/"Internals">

=back

$obj-E<gt>B<writeMessages>(OPTIONS)

=over 4

See L<Mail::Box/"Internals">

=back

=head3 File based folders


=head2 Other methods


$obj-E<gt>B<timespan2seconds>(TIME)

Mail::Box::Dbx-E<gt>B<timespan2seconds>(TIME)

=over 4

See L<Mail::Box/"Other methods">

=back

=head2 Error handling


$obj-E<gt>B<AUTOLOAD>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<addReport>(OBJECT)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

Mail::Box::Dbx-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Box::Dbx-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Box::Dbx-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup


$obj-E<gt>B<DESTROY>

=over 4

See L<Mail::Box/"Cleanup">

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back



=head1 DIAGNOSTICS

I<Error:> Cannot append messages to folder file $filename: $!

Appending messages to a not-opened file-organized folder may fail when the
operating system does not allow write access to the file at hand.

I<Error:> Cannot move away sub-folder $dir


I<Error:> Cannot read dbx folder file $filename.


I<Warning:> Cannot remove folder $name file $filename: $!

Writing an empty folder will usually cause that folder to be removed,
which fails for the indicated reason.  L<new(remove_when_empty)|Mail::Box/"Constructors">

I<Warning:> Cannot remove folder $name file $filename: $!

Writing an empty folder will usually cause that folder to be removed,
which fails for the indicated reason.  L<new(remove_when_empty)|Mail::Box/"Constructors">
controls whether the empty folder will removed; setting it to false
(C<0>) may be needed to avoid this message.

I<Error:> Cannot replace $filename by $tempname, to update folder $name: $!

The replace policy wrote a new folder file to update the existing, but
was unable to give the final touch: replacing the old version of the
folder file for the indicated reason.

I<Warning:> Changes not written to read-only folder $self.

You have opened the folder read-only --which is the default set
by L<new(access)|Mail::Box/"Constructors">--, made modifications, and now want to close it.
Set L<close(force)|Mail::Box/"The folder"> if you want to overrule the access mode, or close
the folder with L<close(write)|Mail::Box/"The folder"> set to C<NEVER>.

I<Error:> Copying failed for one message.

For some reason, for instance disc full, removed by external process, or
read-protection, it is impossible to copy one of the messages.  Copying will
proceed for the other messages.

I<Warning:> Dbx folders are read-only.


I<Error:> Destination folder $name is not writable.

The folder where the messages are copied to is not opened with write
access (see L<new(access)|Mail::Box/"Constructors">).  This has no relation with write permission
to the folder which is controled by your operating system.

I<Warning:> Different messages with id $msgid.

The message id is discovered more than once within the same folder, but the
content of the message seems to be different.  This should not be possible:
each message must be unique.

I<Error:> File too short to get write message $nr ($size, $need)

Mail::Box is lazy: it tries to leave messages in the folders until they
are used, which saves time and memory usage.  When this message appears,
something is terribly wrong: some lazy message are needed for updating the
folder, but they cannot be retreived from the original file anymore.  In
this case, messages can be lost.

This message does appear regularly on Windows systems when using the
'replace' write policy.  Please help to find the cause, probably something
to do with Windows incorrectly handling multiple filehandles open in the
same file.

I<Error:> Folder $name not deleted: not writable.

The folder must be opened with write access via L<new(access)|Mail::Box/"Constructors">, otherwise
removing it will be refused.  So, you may have write-access according to
the operating system, but that will not automatically mean that this
C<delete> method permits you to.  The reverse remark is valid as well.

I<Error:> Invalid timespan '$timespan' specified.

The string does not follow the strict rules of the time span syntax which
is permitted as parameter.

I<Warning:> Message-id '$msgid' does not contain a domain.

According to the RFCs, message-ids need to contain a unique random part,
then an C<@>, and then a domain name.  This is made to avoid the creation
of two messages with the same id.  The warning emerges when the C<@> is
missing from the string.

I<Error:> Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

I<Error:> Unable to create subfolder $name of $folder.

The copy includes the subfolders, but for some reason it was not possible
to copy one of these.  Copying will proceed for all other sub-folders.

I<Error:> Unable to update folder $self.

When a folder is to be written, both replace and inplace write policies are
tried,  If both fail, the whole update fails.  You may see other, related,
error messages to indicate the real problem.


=head1 DETAILS


=head2 How DBX folders work

DBX files are create by Outlook Express.  I can not tell you too much
about it, because me (as author) never use Windows or MicroSoft tools.
Still, it is possible to access some Outlook created folders from Unix.

The folder structure for dbx starts with a single C<Folders.dbx>
file.  This folder contains names of sub-folders.  Each folder can
either contain messages, or contains sub-folders.  Combinations are
not possible.

=head2 This implementation

The ol2mbox project (see L<http://sourceforge.net/project/ol2mbox/>)
has created a C<libdbx> which can read dbx files using nearly any
operating system.  You can simply transport a dbx file from Windows
to Unix/Linux and the read all the messages from it.

Tassilo von Parseval wrote a Perl wrapper around this C-library,
and distributes it as Mail::Transport::Dbx.  Although it named in
one the MailBox namespaces, it is a separate product, because it
requires a C compiler.  Besides, the module will have its own life.

=head2 Converting DBX folders to MBOX

The title of this section is to attract your attension, but is does
not describe anything special related to DBX or MBOX: you can convert
any kind of mail folder into an other with the following code.

I<Example:> converting folders


 my $from = Mail::Box::Dbx->new(folder => 'Folder.dbx')
    or exit;

 my $to   = Mail::Box::Mbox->new(folder => '/tmp/mbox',
    access => 'w', create => 1) or die;

 $from->copyTo($to);





=head1 REFERENCES

See the MailBox website at L<http://perl.overmeer.net/mailbox/> for more details.

=head1 COPYRIGHTS

Distribution version 2.054.
Written by Mark Overmeer (mark@overmeer.net).  See the ChangeLog for
other contributors.

Copyright (c) 2001-2003 by the author(s). All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


