
=head1 NAME

Mail::Box::Locker - manage the locking of mail folders


=head1 INHERITANCE

 Mail::Box::Locker
   is a Mail::Reporter

 Mail::Box::Locker is extended by
   Mail::Box::Locker::DotLock
   Mail::Box::Locker::Flock
   Mail::Box::Locker::Multi
   Mail::Box::Locker::NFS
   Mail::Box::Locker::POSIX


=head1 SYNOPSIS

 use Mail::Box::Locker;
 my $locker = new Mail::Box::Locker(folder => $folder);

 $locker->lock;
 $locker->isLocked;
 $locker->hasLock;
 $locker->unlock;

 use Mail::Box;
 my $folder = Mail::Box->new(lock_method => 'DOTLOCK');
 print $folder->locker->type;


=head1 DESCRIPTION

Each L<Mail::Box|Mail::Box> will create its own C<Mail::Box::Locker> object which
will handle the locking for it.  You can access of the object directly
from the folder, as shown in the examples below.



=head1 METHODS


=head2 Constructors


Mail::Box::Locker-E<gt>B<new>(OPTIONS)

=over 4

Create a new lock. You may do this directly. However, in most cases the
lock will not be separately instantiated but will be the second class in
a multiple inheritance construction with a L<Mail::Box|Mail::Box>.

Generally the client program specifies the locking behavior through
options given to the folder class.

 Option   Defined in       Default      
 expires                   1 hour       
 file                      undef        
 folder                    <required>   
 log      L<Mail::Reporter>  C<'WARNINGS'>
 method                    C<'DOTLOCK'> 
 timeout                   10 seconds   
 trace    L<Mail::Reporter>  C<'WARNINGS'>

. expires SECONDS

=over 4

How long can a lock exist?  If a different e-mail program leaves a stale
lock, then this lock will be removed automatically after the specified
number of seconds.

=back

. file FILENAME

=over 4

Name of the file to lock.  By default, the name of the folder is taken.

=back

. folder FOLDER

=over 4

Which folder is locked.

=back

. log LEVEL

. method METHOD | CLASS

=over 4

Which kind of locking, specified as one of the following names, or a
full CLASS name.  Supported METHODs are

=over 4

=item 'DOTLOCK' | 'dotlock'

The folder handler creates a file which signals that it is in use.  This
is a bit problematic, because not all mail-handling software agree on
the name of the file to be created.

On various folder types, the lockfile differs.  See the documentation for
each folder, which describes the locking strategy as well as special
options to change the default behavior.

=item 'FLOCK' | 'flock'

For some folder handlers, locking is based on a file locking mechanism
provided by the operating system.  However, this does not work on all
systems, such as network filesystems, and such. This also doesn't work on
folders based on directories (L<Mail::Box::Dir|Mail::Box::Dir> and derived).

=item 'POSIX' | 'posix'

Use the POSIX standard fcntl locking.

=item 'MULTI' | 'multi'

Try more than one locking method to be used at the same time, probably
all available, to avoid any chance that you miss a lock from a different
application.

=item 'NFS' | 'nfs'

A kind of C<dotlock> file-locking mechanism, but adapted to work over
NFS.  Extra precaution is needed because an C<open O_EXCL> on NFS is
not an atomic action.

=item 'NONE' | 'none'

Do not use locking.

=back

The other option is to produce your own C<Mail::Box::Locker> derived class,
which implements the desired locking method. (Please consider offering it
for inclusion in the public Mail::Box module!) Create an instance of that
class with this parameter:

 my $locker = Mail::Box::Locker::MyOwn->new;
 $folder->open(locker => $locker);

=back

. timeout SECONDS|'NOTIMEOUT'

=over 4

How long to wait while trying to acquire the lock. The lock request will
fail when the specified number of seconds is reached.  If C<'NOTIMEOUT'> is
specified, the module will wait until the lock can be taken.

Whether it is possible to limit the wait time is platform- and
locking-method-specific.  For instance, the `dotlock' method on Windows
will always wait until the lock has been received.

=back

. trace LEVEL

=back

=head2 The Locker


$obj-E<gt>B<filename>([FILENAME])

=over 4

Returns the filename which is used to lock the folder, optionally after
setting it to the specified FILENAME.

I<Example:> 

 print $locker->filename;

=back

$obj-E<gt>B<folder>

=over 4

Returns the folder object which is locker.

=back

$obj-E<gt>B<name>

=over 4

Returns the method used to lock the folder. See the L<new(method)|Mail::Box::Locker/"METHODS"> for
details on how to specify the lock method.  The name of the method is
returned in upper-case.

I<Example:> 

 if($locker->name eq 'FLOCK') ...

=back

=head2 Locking


$obj-E<gt>B<hasLock>

=over 4

Check whether the folder has the lock.

I<Example:> 

 if($locker->hasLock) {...}
 if($folder->locker->hasLock) {...}

=back

$obj-E<gt>B<isLocked>

=over 4

Test if the folder is locked by this or a different application.

I<Example:> 

 if($locker->isLocked) {...}
 if($folder->locker->isLocked) {...}

=back

$obj-E<gt>B<lock>(FOLDER)

=over 4

Get a lock on a folder.  This will return false if the lock fails.

I<Example:> 

 die unless $locker->lock;
 if($folder->locker->lock) {...}

=back

$obj-E<gt>B<unlock>

=over 4

Undo the lock on a folder.

I<Example:> 

 $locker->unlock;
 $folder->locker->unlock;

=back

=head2 Error handling


$obj-E<gt>B<AUTOLOAD>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<addReport>(OBJECT)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

Mail::Box::Locker-E<gt>B<defaultTrace>([LEVEL, [LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<errors>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<log>([LEVEL [,STRINGS]])

Mail::Box::Locker-E<gt>B<log>([LEVEL [,STRINGS]])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logPriority>(LEVEL)

Mail::Box::Locker-E<gt>B<logPriority>(LEVEL)

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<logSettings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<notImplemented>

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<report>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<reportAll>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<trace>([LEVEL])

=over 4

See L<Mail::Reporter/"Error handling">

=back

$obj-E<gt>B<warnings>

=over 4

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup


$obj-E<gt>B<DESTROY>

=over 4

When the locker is destroyed, for instance when the folder is closed
or the program ends, the lock will be automatically removed.

=back

$obj-E<gt>B<inGlobalDestruction>

=over 4

See L<Mail::Reporter/"Cleanup">

=back



=head1 DIAGNOSTICS

I<Error:> Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.






=head1 REFERENCES

See the MailBox website at L<http://perl.overmeer.net/mailbox/> for more details.

=head1 COPYRIGHTS

Distribution version 2.050.
Written by Mark Overmeer (mark@overmeer.net).  See the ChangeLog for
other contributors.

Copyright (c) 2001-2003 by the author(s). All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.


