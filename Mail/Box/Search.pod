
=head1 NAME


Mail::Box::Search - select messages within a mail box

=head1 CLASS INHERITANCE

Mail::Box::Search
   is a Mail::Reporter

Mail::Box::Search is extended by
   Mail::Box::Search::Grep
   Mail::Box::Search::IMAP
   Mail::Box::Search::SpamAssassin

=head1 SYNOPSIS


 use Mail::Box::Manager;
 my $mgr    = Mail::Box::Manager->new;
 my $folder = $mgr->open('Inbox');

 my $filter = Mail::Box::Search::[something]->new;
 my @msgs   = $filter->search($folder, ...);
 if($filter->search($message)) {...}

=head1 DESCRIPTION


This Mail::Box::Search class is the base class for various message scan
algorithms.  The selected messages can be labeled.  Boolean operations on
messages are supported.

Currently implemented searches:

=over 4

=item Mail::Box::Search::Grep

Match header or body against a regular expression in a UNIX C<grep> like
fashion.

=item Mail::Box::Search::SpamAssassin

Try to detect spam, using Mail::SpamAssassin.

=item Mail::Box::Search::IMAP

Search an IMAP folder for special interface IMAP folders provide for it.
UNDER CONSTRUCTION till Mail::Transport::IMAP4 is complete.

=item

=back

=head1 METHODS

=head2 Initiation

=over 4

=item B<new> OPTIONS X<new>

Create a filter.

 OPTION               DEFAULT
 binaries             <false>
 decode               <true>
 delayed              <true>
 deleted              <false>
 deliver              undef
 in                   'BODY;
 label                undef
 limit                0
 log                  'WARNINGS'
 logical              'REPLACE'
 multiparts           <true>
 trace                'WARNINGS'

=over 4

=item B<binaries> =E<gt> BOOLEAN X<new(binaries)>

Whether to include binary bodies in the search.

=item B<decode> =E<gt> BOOLEAN X<new(decode)>

Decode the messages before the search takes place.  Even plain text messages
can be encoded, for instance as C<quoted-printable>, which may disturb the
results.  However, decoding will slow-down the search.

=item B<delayed> =E<gt> BOOLEAN X<new(delayed)>

Include the delayed messages (which will be parsed) in the search.  If you
set this to false, you may find fewer hits.

=item B<deleted> =E<gt> BOOLEAN X<new(deleted)>

In most cases, you will not be interested in results which are
found in messages flagged to be deleted.  However, with this option
you can specify you want them to be searched too.

=item B<deliver> =E<gt> undef|CODE|'DELETE' X<new(deliver)>

The exact functionality of this parameter differs per search method, so
read the applicable man-page.  In any case C<undef> means that details
are not collected for this search, which is the fastest search.

C<DELETE> will flag the message to be flagged for deletion.
You may also specify your own CODE reference.  With an reference
to an array, the information about the matches is collected as a list
of hashes, one hash per match.

=item B<in> =E<gt> 'HEAD'|'BODY'|'MESSAGE' X<new(in)>

Where to look for the match.

=item B<label> =E<gt> STRING X<new(label)>

Mark all selected messages with the specified STRING.  If this field is
not specified, the message will not get a label; search() also returns
a list of selected messages.

=item B<limit> =E<gt> NUMBER X<new(limit)>

Limit the search to the specified NUMBER of messages.  When the NUMBER
is positive, the search starts at the first message in the folder or
thread.  A negative NUMBER starts at the end of the folder.  If the limit
is set to zero, there is no limit.

=item B<log> =E<gt> LEVEL

See Mail::Reporter::new(log)

=item B<logical> =E<gt> 'REPLACE'|'AND'|'OR'|'NOT'|'AND NOT'|'OR NOT' X<new(logical)>

Only applicable in combination with a C<label>.
How to handle the existing labels.  In case of C<REPLACE>, messages
which already are carrying the label are stripped from their
selection (unless they match again).  With C<AND>, the message must
be selected by this search and already carry the label, otherwise the
label will not be set.  Specify C<OR> to have newly selected messages
added to the set of already selected messages.

C<NOT> is true for messages which do not fulfill the search.  The
details output will still contain the places where the the match was
found, however those messages will complementary set of messages will
be labeled and returned.

=item B<multiparts> =E<gt> BOOLEAN X<new(multiparts)>

Are multiparts to be included in the search results?  Some MUA have
problems handling details received from the search.  When this flag
is turned off, the body of multiparts will be ignored.  The parts
search will include the preamble and epilogue.

=item B<trace> =E<gt> LEVEL

See Mail::Reporter::new(trace)

=back

=back

=head2 Searching

=over 4

=item B<inBody> PART, BODY X<inBody>

Tests whether body contains the requesting information.  See the
specific search module for its parameters.

=item B<inHead> PART, HEAD X<inHead>

Tests whether header contains the requesting information.  See the
specific search module for its parameters.

=item B<search> FOLDER|THREAD|MESSAGE|ARRAY-OF-MESSAGES X<search>

Check which messages from the FOLDER (Mail::Box) match the
search parameters.  The matched messages are returned as list.  You
can also specify a THREAD (Mail::Box::Thread::Node), one single
MESSAGE (Mail::Message), or an array of messages.

Sometimes we know how only one match is needed.  In this case, this
searching will stop at the first match.  For instance, when C<limit> is C<-1>
or C<1>, or when the search in done in scalar context.

Examples:

 my $grep = Mail::Box::Search::Grep->new
  ( match   => 'My Name Is Nobody'
  , deliver => 'PRINT'
  );

 $grep->search($folder);

 my $message = $folder->message(3);
 $grep->search($message);

 my $thread  = $message->threadStart;
 $grep->search($thread);

=item B<searchPart> PART X<searchPart>

Search this message PART for matches.

=back

=head2 The Results

=over 4

=item B<printMatch> [FILEHANDLE], HASH X<printMatch>

Print the information about the match (see search(deliver)) in
some understandable way.  If no file handle
is specified, the output will go to the selected filehandle (see
C<perldoc -f select>).

=back

=head2 Logging and Tracing

=over 4

=item B<defaultTrace> [LEVEL, [LEVEL]

See Mail::Reporter::defaultTrace()

=item B<errors> 

See Mail::Reporter::errors()

=item B<log> [LEVEL [,STRINGS]]

See Mail::Reporter::log()

=item B<report> [LEVEL]

See Mail::Reporter::report()

=item B<reportAll> [LEVEL]

See Mail::Reporter::reportAll()

=item B<trace> [LEVEL]

See Mail::Reporter::trace()

=item B<warnings> 

See Mail::Reporter::warnings()

=back

=head2 Other Methods

=over 4

=item B<AUTOLOAD> 

See Mail::Reporter::AUTOLOAD()

=item B<DESTROY> 

See Mail::Reporter::DESTROY()

=item B<inGlobalDestruction> 

See Mail::Reporter::inGlobalDestruction()

=item B<logPriority> LEVEL

See Mail::Reporter::logPriority()

=item B<logSettings> 

See Mail::Reporter::logSettings()

=item B<notImplemented> 

See Mail::Reporter::notImplemented()

=back

=head1 SEE ALSO

A good start to read is Mail::Box-Overview.
More documentation and a mailinglist are available from the project's
website at L<http://perl.overmeer.net/mailbox/>.

=head1 AUTHOR

Written by Mark Overmeer (L<mark@overmeer.net|mailto:mark@overmeer.net>)
with the help of many.  See the ChangeLog for details.

=head1 VERSION

This code is beta, version 2.034.

Copyright (c) 2001-2002 by the authors. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
