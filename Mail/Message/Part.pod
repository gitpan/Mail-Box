
=head1 NAME

Mail::Message::Part - a part of a message, but a message by itself.

=head1 CLASS INHERITANCE

 Mail::Message::Part
   is a Mail::Message
   is a Mail::Reporter

=head1 SYNOPSIS

 my Mail::Message $message = ...;
 if($message->isMultipart) {
    my Mail::Message::Part $part;

    foreach $part ($message->body->parts) {
       $part->print(\*OUT);
       my $attached_head = $part->head;
       my $attached_body = $part->body;      # encoded as read
       my $attached_body = $part->decoded;   # transfer-encoding removed
    }
 }

=head1 DESCRIPTION

A Mail::Message::Part object contains a message which is included in
the body of an other message.  For instance I<attachments> are I<parts>.

READ Mail::Message FIRST.  A part is a special message: it has a
reference to its parent message, and will usually not be sub-classed
into mail-folder-specific variants.

=head1 METHODS

=head2 Initiation

=over 4

=item B<new> OPTIONS

(Class method) 
Create a message part.

 OPTION               DEFAULT
 body                 undef
 body_type            'Mail::Message::Body::Lines'
 container            <obligatory>
 field_type           undef
 head                 undef
 head_type            'Mail::Message::Head::Complete'
 log                  'WARNINGS'
 messageId            undef
 modified             <false>
 trace                'WARNINGS'
 trusted              <false>

=over 4

=item B<body> =E<gt> OBJECT

See Mail::Message::new(body)

=item B<body_type> =E<gt> CLASS

See Mail::Message::new(body_type)

=item B<container> =E<gt> BODY

Reference to the parental Mail::Message::Body object where this
part is a member of.  That object may be a Mail::Message::Body::Multipart
or a Mail::Message::Body::Nested.

=item B<field_type> =E<gt> CLASS

See Mail::Message::new(field_type)

=item B<head> =E<gt> OBJECT

See Mail::Message::new(head)

=item B<head_type> =E<gt> CLASS

See Mail::Message::new(head_type)

=item B<log> =E<gt> LEVEL

See Mail::Reporter::new(log)

=item B<messageId> =E<gt> STRING

See Mail::Message::new(messageId)

=item B<modified> =E<gt> BOOLEAN

See Mail::Message::new(modified)

=item B<trace> =E<gt> LEVEL

See Mail::Reporter::new(trace)

=item B<trusted> =E<gt> BOOLEAN

See Mail::Message::new(trusted)

=back

=back

=head2 Constructing a Message

=over 4

=item B<bounce> [RG-OBJECT|OPTIONS]

See Mail::Message::Construct::bounce()

=item B<build> [MESSAGE|BODY], CONTENT

See Mail::Message::Construct::build()

=item B<buildFromBody> BODY, CONTAINER, HEADERS

(Class method) 
Shape a message part around a BODY.  Bodies have information about their
content in them, which is used to construct a header for the message.
Next to that, more HEADERS can be specified.  No headers are obligatory.
No extra headers are fabricated automatically.

Examples:

 my $multi = Mail::Message::Body::Multipart->new;
 my $part  = Mail::Message::Part->buildFromBody($body, $multi);

=item B<coerce> BODY|MESSAGE, MULTIPART, HEADERS

Transforms a BODY or MESSAGE to a real message part.  The MULTIPART refers
to the parental body.

When ta BODY is specified, extra HEADERS can be supplied as well.  Bodies
are coerced into message parts by calling buildFromBody().  If you specify
a MESSAGE residing in a folder, this message will automatically be cloned.

=item B<forward> OPTIONS

See Mail::Message::Construct::forward()

=item B<forwardPostlude> 

See Mail::Message::Construct::forwardPostlude()

=item B<forwardPrelude> 

See Mail::Message::Construct::forwardPrelude()

=item B<forwardSubject> STRING

See Mail::Message::Construct::forwardSubject()

=item B<read> FILEHANDLE|SCALAR|REF-SCALAR|ARRAY-OF-LINES, OPTIONS

See Mail::Message::Construct::read()

=item B<reply> OPTIONS

See Mail::Message::Construct::reply()

=item B<replyPrelude> [STRING|FIELD|ADDRESS]

See Mail::Message::Construct::replyPrelude()

=item B<replySubject> STRING

See Mail::Message::Construct::replySubject()

=back

=head2 The Message

=over 4

=item B<clone> 

See Mail::Message::clone()

=item B<container> 

See Mail::Message::container()

=item B<delete> 

Do not print or send this part of the message anymore.  See deleted().
The time stamp of the moment of deletion is stored as value.  When the same
message is deleted more than once, the first time stamp will stay.

Examples:

 $message->part(2)->delete;
 $part->deleted(1);
 delete $part;

=item B<deleted> [BOOLEAN]

Set the delete flag for this part of the multipart message body.  Without
argument, the method returns the same is the isDeleted() method, which is
prefered.  When a true value is given, delete() is called.

=item B<isDeleted> 

Returns the moment (as the time function returns) when the message part was
flagged for deletion, or C<undef> when the part is not deleted.

Examples:

 next if $part->isDeleted;

 if(my $when = $part->isDeleted) {
    print scalar localtime $when;
 }

=item B<isDummy> 

See Mail::Message::isDummy()

=item B<isModified> 

See Mail::Message::isModified()

=item B<isPart> 

See Mail::Message::isPart()

=item B<messageId> 

See Mail::Message::messageId()

=item B<modified> [BOOLEAN]

See Mail::Message::modified()

=item B<print> [FILEHANDLE]

See Mail::Message::print()

=item B<printEscapedFrom> FILEHANDLE

Prints the message part, but all lines which start with 'From ' will get
a leading C<gt>.  See Mail::Message::Body::printEscapedFrom().

=item B<send> [MAILER], OPTIONS

See Mail::Message::send()

=item B<size> 

See Mail::Message::size()

=item B<toplevel> 

See Mail::Message::toplevel()

=item B<write> [FILEHANDLE]

See Mail::Message::write()

=back

=head2 The Header

=over 4

=item B<head> [HEAD]

See Mail::Message::head()

=back

=head2 Header Shortcuts

=over 4

=item B<bcc> 

See Mail::Message::bcc()

=item B<cc> 

See Mail::Message::cc()

=item B<date> 

See Mail::Message::date()

=item B<destinations> 

See Mail::Message::destinations()

=item B<from> 

See Mail::Message::from()

=item B<get> FIELD

See Mail::Message::get()

=item B<guessTimestamp> 

See Mail::Message::guessTimestamp()

=item B<nrLines> 

See Mail::Message::nrLines()

=item B<sender> 

See Mail::Message::sender()

=item B<subject> 

See Mail::Message::subject()

=item B<timestamp> 

See Mail::Message::timestamp()

=item B<to> 

See Mail::Message::to()

=back

=head2 The Body

=over 4

=item B<body> [BODY]

See Mail::Message::body()

=item B<decoded> OPTIONS

See Mail::Message::decoded()

=item B<encode> OPTIONS

See Mail::Message::encode()

=item B<isMultipart> 

See Mail::Message::isMultipart()

=item B<parts> ['ALL'|'ACTIVE'|'DELETED'|'RECURSE'|FILTER]

See Mail::Message::parts()

=back

=head2 Access to the Message

=over 4

=item B<file> 

See Mail::Message::Construct::file()

=item B<lines> 

See Mail::Message::Construct::lines()

=item B<string> 

See Mail::Message::Construct::string()

=back

=head2 Labels

=over 4

=item B<label> LABEL [,VALUE [LABEL, VALUE] ]

See Mail::Message::label()

=item B<labels> 

See Mail::Message::labels()

=item B<labelsToStatus> 

See Mail::Message::labelsToStatus()

=item B<statusToLabels> 

See Mail::Message::statusToLabels()

=back

=head2 Reading and Writing [internals]

=over 4

=item B<DESTROY> 

See Mail::Message::DESTROY()

=item B<isDelayed> 

See Mail::Message::isDelayed()

=item B<readBody> PARSER, HEAD [, BODYTYPE]

See Mail::Message::readBody()

=item B<readFromParser> PARSER, [BODYTYPE]

See Mail::Message::readFromParser()

=item B<readHead> PARSER [,CLASS]

See Mail::Message::readHead()

=item B<storeBody> BODY

See Mail::Message::storeBody()

=item B<takeMessageId> [STRING]

See Mail::Message::takeMessageId()

=back

=head2 Logging and Tracing

=over 4

=item B<defaultTrace> [LEVEL, [LEVEL]

See Mail::Reporter::defaultTrace()

=item B<errors> 

See Mail::Reporter::errors()

=item B<log> [LEVEL [,STRINGS]]

See Mail::Reporter::log()

=item B<printStructure> [FILEHANDLE][, INDENT]

See Mail::Message::Construct::printStructure()

=item B<report> [LEVEL]

See Mail::Reporter::report()

=item B<reportAll> [LEVEL]

See Mail::Reporter::reportAll()

=item B<trace> [LEVEL]

See Mail::Reporter::trace()

=item B<warnings> 

See Mail::Reporter::warnings()

=back

=head2 Other Methods

=over 4

=item B<AUTOLOAD> 

See Mail::Reporter::AUTOLOAD()

=item B<inGlobalDestruction> 

See Mail::Reporter::inGlobalDestruction()

=item B<logPriority> LEVEL

See Mail::Reporter::logPriority()

=item B<logSettings> 

See Mail::Reporter::logSettings()

=item B<notImplemented> 

See Mail::Reporter::notImplemented()

=back

=head1 SEE ALSO

A good start to read is Mail::Box-Overview.
More documentation and a mailinglist are available from the project's
website at L<http://perl.overmeer.net/mailbox/>.

=head1 AUTHOR

Written by Mark Overmeer (L<mark@overmeer.net|mailto:mark@overmeer.net>)
with the help of many.  See the ChangeLog for details.

=head1 VERSION

This code is beta, version 2.040.

Copyright (c) 2001-2003 by the authors. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
