
=head1 NAME


Mail::Message::Convert::MimeEntity - translate Mail::Message to MIME::Entity vv

=head1 CLASS INHERITANCE

Mail::Message::Convert::MimeEntity
   is a Mail::Message::Convert
   is a Mail::Reporter

=head1 SYNOPSIS


 use Mail::Message::Convert::MimeEntity;
 my $convert = Mail::Message::Convert::MimeEntity->new;

 my Mail::Message $msg    = Mail::Message->new;
 my MIME::Entity  $entity = $convert->export($msg);

 my MIME::Entity  $entity = MIME::Entity->new;
 my Mail::Message $msg    = $convert->from($entity);

 use Mail::Box::Manager;
 my $mgr     = Mail::Box::Manager->new;
 my $folder  = $mgr->open(folder => 'Outbox');
 $folder->addMessage($entity);

=head1 DESCRIPTION


The MIME::Entity extends Mail::Internet message with multiparts
and more methods.  The Mail::Message objects are more flexible
in how the message parts are stored, and uses separate header and body
objects.

=head1 METHODS

=head2 Initiation

=over 4

=item B<new> OPTIONS X<new>

 OPTION               DEFAULT
 fields               <see description>
 log                  'WARNINGS'
 trace                'WARNINGS'

=over 4

=item B<fields> =E<gt> NAMES|ARRAY-OF-NAMES|REGEXS

See Mail::Message::Convert::new(fields)

=item B<log> =E<gt> LEVEL

See Mail::Reporter::new(log)

=item B<trace> =E<gt> LEVEL

See Mail::Reporter::new(trace)

=back

=back

=head2 Converting

=over 4

=item B<export> MESSAGE, OPTIONS X<export>

Returns a new message object based on the information from
a Mail::Message object.  The MESSAGE specified is an
instance of a Mail::Message.

Examples:

 my $convert = Mail::Message::Convert::MimeEntity->new;
 my Mail::Message $msg  = Mail::Message->new;
 my MIME::Entity  $copy = $convert->export($msg);

=item B<from> OBJECT, OPTIONS X<from>

Returns a new Mail::Message object based on the information from
an message-type which is strange to the Mail::Box set of modules.

Examples:

 my $convert = Mail::Message::Convert::MimeEntity->new;
 my MIME::Entity  $msg  = MIME::Entity->new;
 my Mail::Message $copy = $convert->from($msg);

=item B<selectedFields> HEAD

See Mail::Message::Convert::selectedFields()

=back

=head2 Logging and Tracing

=over 4

=item B<defaultTrace> [LEVEL, [LEVEL]

See Mail::Reporter::defaultTrace()

=item B<errors> 

See Mail::Reporter::errors()

=item B<log> [LEVEL [,STRINGS]]

See Mail::Reporter::log()

=item B<report> [LEVEL]

See Mail::Reporter::report()

=item B<reportAll> [LEVEL]

See Mail::Reporter::reportAll()

=item B<trace> [LEVEL]

See Mail::Reporter::trace()

=item B<warnings> 

See Mail::Reporter::warnings()

=back

=head2 Other Methods

=over 4

=item B<AUTOLOAD> 

See Mail::Reporter::AUTOLOAD()

=item B<DESTROY> 

See Mail::Reporter::DESTROY()

=item B<inGlobalDestruction> 

See Mail::Reporter::inGlobalDestruction()

=item B<logPriority> LEVEL

See Mail::Reporter::logPriority()

=item B<logSettings> 

See Mail::Reporter::logSettings()

=item B<notImplemented> 

See Mail::Reporter::notImplemented()

=back

=head1 SEE ALSO

A good start to read is Mail::Box-Overview.
More documentation and a mailinglist are available from the project's
website at L<http://perl.overmeer.net/mailbox/>.

=head1 AUTHOR

Written by Mark Overmeer (L<mark@overmeer.net|mailto:mark@overmeer.net>)
with the help of many.  See the ChangeLog for details.

=head1 VERSION

This code is beta, version 2.028.

Copyright (c) 2001-2002 by the authors. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
