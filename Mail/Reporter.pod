
=head1 NAME

Mail::Reporter - base-class and error reporter for Mail::Box

=head1 CLASS INHERITANCE

 Mail::Reporter is extended by
   Mail::Box
   Mail::Box::Locker
   Mail::Box::MH::Index
   Mail::Box::MH::Labels
   Mail::Box::Manager
   Mail::Box::Parser
   Mail::Box::Search
   Mail::Box::Thread::Manager
   Mail::Box::Thread::Node
   Mail::Message
   Mail::Message::Body
   Mail::Message::Body::Delayed
   Mail::Message::Convert
   Mail::Message::Field
   Mail::Message::Field::AddrGroup
   Mail::Message::Field::Address
   Mail::Message::Head
   Mail::Message::Head::ResentGroup
   Mail::Message::TransferEnc
   Mail::Transport

=head1 SYNOPSIS

 $folder->log(WARNING => 'go away');
 print $folder->trace;        # current level
 $folder->trace('PROGRESS');  # set level
 print $folder->errors;
 print $folder->report('PROGRESS');

=head1 DESCRIPTION

Read C<Mail::Box-Overview> first.  There are a few objects which produce
error messages, but which will not break the program.  For instance, an
erroneous message doesn't break a whole folder.

The C<Mail::Reporter> class is the base class for each object which can
produce errors, and can be configured for each mailbox, mail message,
and mail manager separately.

=head1 METHODS
The C<Mail::Reporter> class is the base for nearly all other
objects.  It can store and report problems, and contains the general
constructor new().

=head2 Initiation

=over 4

=item B<new> OPTIONS

(Class method) 
This error container is also the base constructor for all modules, (as long
as there is no need for an other base object)  The constructor always accepts
the following OPTIONS related to error reports.

 OPTION               DEFAULT
 log                  'WARNINGS'
 trace                'WARNINGS'

=over 4

=item B<log> =E<gt> LEVEL

Log messages which have a priority higher or equal to the specified
level are stored internally and can be retrieved later.  The global
default for this option can be changed with defaultTrace().

Known levels are C<'INTERNAL'>, C<'ERRORS'>, C<'WARNINGS'>, C<'PROGRESS'>,
C<'NOTICES'> C<'DEBUG'>, and C<'NONE'>.  The C<PROGRESS> level relates to
the reading and writing of folders.  C<NONE> will cause only C<INTERNAL>
errors to be logged.
By the way: C<ERROR> is an alias for C<ERRORS>, as C<WARNING> is an alias
for C<WARNINGS>, and C<NOTICE> for C<NOTICES>.

=item B<trace> =E<gt> LEVEL

Trace messages which have a level higher or equal to the specified level
are directly printed using warn.  The global default for this option can
be changed with defaultTrace().

=back

=back

=head2 Logging and Tracing

=over 4

=item B<defaultTrace> [LEVEL, [LEVEL]

(Class or Instance method) 
Reports the default trace and log LEVEL which is used for object as list
of two elements.  When not explicitly set, both are set to C<WARNINGS>.
Two values are returned: the first is the log level, the second represents
the trace level.  Both are special variables: in numeric context they
deliver a value (the internally used value), and in string context the
string name.  Be warned that the string is always singular!

You may specify one or two arguments.  In case of one argument, the
default log and trace levels will both be set to that value.  When two
levels are specified, the first represent the default log-level and
the second the default trace level.

Examples:

 my ($loglevel, $tracelevel) = Mail::Reporter->defaultTrace;
 Mail::Reporter->defaultTrace('NOTICES');

 my ($l, $t) = Mail::Reporter->defaultTrace('WARNINGS', 'DEBUG');
 print $l;     # prints "WARNING"  (no S!)
 print $l+0;   # prints "4"

=item B<errors> 

Equivalent to

 $folder->report('ERRORS')

=item B<log> [LEVEL [,STRINGS]]

(Class or Instance method) 
As instance method this function has three different purposes.  Without
any argument, it returns one scalar containing the number which is internally
used to represent the current log level, and the textual representation of
the string at the same time. See Scalar::Util::dualvar() for an explanation.

With one argument, a new level of logging detail
is set (specify a number of one of the predefined strings).
With more arguments, it is a report which may need to be logged or traced.

As class method, only a message can be passed.  The global configuration
value set with defaultTrace() is used to decide whether the message is
shown or ignored.

Each log-entry has a LEVEL and a text string which will
be constructed by joining the STRINGS.  If there is no newline, it will
be added.

Examples:

 print $message->log;      # may print "NOTICE"
 print $message->log +0;   # may print "3"
 $message->log('ERRORS');  # sets a new level, returns the numeric value

 $message->log(WARNING => "This message is too large.");
 $folder ->log(NOTICE  => "Cannot read from file $filename.");
 $manager->log(DEBUG   => "Hi there!", reverse sort @l);

 Mail::Message->log(ERROR => 'Unknown');

=item B<report> [LEVEL]

Get logged reports, as list of strings.  If a LEVEL is specified, the log
for that level is returned.

In case no LEVEL is specified, you get all messages each as reference
to a tuple with level and message.

Examples:

 my @warns = $message->report('WARNINGS');
   # previous indirectly callable with
   my @warns = $msg->warnings;

 print $folder->report('ERRORS');

 if($folder->report('DEBUG')) {...}

 my @reports = $folder->report;
 foreach (@reports) {
    my ($level, $text) = @$_;
    print "$level report: $text";
 }

=item B<reportAll> [LEVEL]

Report all messages which were produced by this object and all the objects
which are maintained by this object.  This will return a list of triplets,
each containing a reference to the object which caught the report, the
level of the report, and the message.

Examples:

 my $folder = Mail::Box::Manager->new->open(folder => 'inbox');
 my @reports = $folder->reportAll;
 foreach (@reports) {
    my ($object, $level, $text) = @$_;

    if($object->isa('Mail::Box')) {
       print "Folder $object: $level: $message";
    } elsif($object->isa('Mail::Message') {
       print "Message ".$object->seqnr.": $level: $message";
    }
 }

=item B<trace> [LEVEL]

Change the trace LEVEL of the object. When no arguments are specified, the
current level is returned only.  It will be returned in one scalar which
contains both the number which is internally used to represent the level,
and the string which represents it.  See logPriority().

=item B<warnings> 

Equivalent to

 $folder->report('WARNINGS')

=back

=head2 Other Methods

=over 4

=item B<AUTOLOAD> 

produce a nice warning if the sub-classes cannot resolve a method.

=item B<DESTROY> 

Cleanup.

=item B<inGlobalDestruction> 

Returns whether the program is breaking down.  This is used in DESTROY(),
where during global destructions references cannot be used.

=item B<logPriority> LEVEL

(Class or Instance method) 
One error level (log or trace) has more
than one representation: a numeric value and one or more strings.  For
instance, 4, 'WARNING', and 'WARNINGS' are all the same.  You can specify
any of these, and in return you get a dualvar (see Scalar::Util::dualvar())
back, which contains the number and the singular form.

The higher the number, the more important the message.
Only messages about C<INTERNAL> problems are more important than C<NONE>.

Examples:

 my $r = Mail::Reporter->logPriority('WARNINGS');
 my $r = Mail::Reporter->logPriority('WARNING');    # same
 my $r = Mail::Reporter->logPriority(4);            # same, deprecated
 print $r;      # prints 'WARNING'  (no S!)
 print $r + 0;  # prints 4
 if($r < Mail::Reporter->logPriority('ERROR')) {..} # true

=item B<logSettings> 

Returns a list of (key => value) pairs which can be used to initiate
a new object with the same log-settings as this one.

Examples:

 $head->new($folder->logSettings);

=item B<notImplemented> 

A special case of log(), which logs a C<INTERNAL>-error
and then croaks.  This is used by extension writers.

=back

=head1 SEE ALSO

A good start to read is Mail::Box-Overview.
More documentation and a mailinglist are available from the project's
website at L<http://perl.overmeer.net/mailbox/>.

=head1 AUTHOR

Written by Mark Overmeer (L<mark@overmeer.net|mailto:mark@overmeer.net>)
with the help of many.  See the ChangeLog for details.

=head1 VERSION

This code is beta, version 2.037.

Copyright (c) 2001-2003 by the authors. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
