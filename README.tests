
STATUS

This set of modules was written in December 2000.  This is quite recent,
so please check for a new version: new software often sees many changes in
the first few months.

The release status of the whole package is   ***** BETA *****
There are many tests, but they do not cover every situation yet.
The first BETA had version 1.0.  The module will go out of BETA if I
learn of any application which successfully uses Mail::Box.


Tested
======

In the `t' directory, there are quite a number of tests, but they only
test some parts of the program.  Other parts have been written, but are
not tested.  Everything you read in the documentation should be there.

Support modules        Mail::Reporter
   01report.t          maintaining warnings/errors/trace

Basic Mail::Message    Mail::Message  ::Field + ::Head* + ::Body*
   11field1.t          test storage of one header-line in ::Fast
   11field2.t          test storage of one header-line in ::Flex
   12head0h.t          test storage of one header
   13body0s.t          test storage of a string body
   13body1l.t          test storage of a lines body
   13body2f.t          test storage of a body in a file
   13body3m.t          test handling multipart bodies

Parsing in C           Mail::Box::Parser::C
   20c0avail.t         check the availability of Inline::C
   20c1field.t         check folding of headerlines.
   20c2head.t          test reading a header from file
   20c3bodys.t         read body from file into scalar
   20c4bodyl.t         read body from file into array
   20c5bodyd.t         read body delayed, and then trigger the load
   20c6bodyf.t         read body from folder file into separate file
   20c7bodym.t         read body for multipart messages

Parsing in Perl        Mail::Box::Parser::Perl
   21p1field.t         check folding of headerlines.
   21p2head.t          test reading a header from file
   21p3bodys.t         read body from file into scalar
   21p4bodyl.t         read body from file into array
   21p5bodyd.t         read body delayed, and then trigger the load
   21p6bodyf.t         read body from folder file into separate file
   21p7bodym.t         read body for multipart messages

Transfer encodings     Mail::Message::TransfEnc*
   30base64.t          base64 transfer encoding
   30eight.t           8bit transfer encoding
   30quoted.t          quoted-printable transfer encoding
   30seven.t           7bit transfer encoding

Body encoding          Mail::Message::Body::Encode
   39encode.t          encode
                       unify
                       build

Mbox-folders:          Mail::Box::Mbox*
   42mbox1r.t          reading mbox
   42mbox2w.t          writing mbox
   42mbox3d.t          delay loading mbox
   42mbox4a.t          appending to opened and unopened mbox folders
   42mbox5c.t          folders and sub-folders in mbox
   42mbox6t.t          test threads
   42mbox7i.t          writing of mbox with replace

MH-folders:            Mail::Box::MH*
   43mh1r.t            reading mh
   43mh2w.t            writing mh
   43mh3a.t            appending to opened and unopened mh folders
   43mh5c.t            folders and sub-folders mh
   43mh6t.t            test threads mh
   43mh7s.t            mh_sequences and labels

Body construction      Mail::Message::Body::Construct
   51stripsig.t        signature stripping
                       concatenate
                       foreachLine

Message construction   Mail::Message::Construct
   55reply0s.t         create a reply subject
   55reply1r.t         create singlepart message replies
   56bounce.t          bounce
   57forw0s.t          create a forward subject
   57forw1f.t          create singlepart message forwards

Folder manager:
   60mgr.t             locating/opening/closing folders.
   61threads.t         thread detection and processing.

Searching:
   65search1g.t        search grep

Locking:
   70dotlock.t         dotlock mechanism
   70flock.t           locking based on file-handle with flock
   70posix.t           locking based on posix fcntl's
   70nfslock.t         dotlocking over NFS
   70multi.t           multi-locks in parallel

Ties:
   82tieary.t          accessing folder as array.
   83tiehash.t         accessing folder as hash.

Foreign messages:      Mail::Message::Convert*
   90mailint.t         Conversions from and to Mail::Internet
   90mimeent.t         Conversions from and to MIME::Entity

NOT Tested
==========

MH index-file  (but I expect it to work)

So many things are tested, but quite a lot is still lacking.  Please
contribute.
